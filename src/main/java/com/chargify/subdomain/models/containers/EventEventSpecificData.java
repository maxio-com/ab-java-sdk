/*
 * MaxioAdvancedBillingFormerlyChargifyAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.chargify.subdomain.models.containers;

import com.chargify.subdomain.ApiHelper;
import com.chargify.subdomain.models.EventData;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import io.apimatic.core.annotations.TypeCombinator.TypeCombinatorCase;
import java.io.IOException;
import java.util.Arrays;

/**
 * This is a container class for one-of types.
 */
@JsonDeserialize(using = EventEventSpecificData.EventEventSpecificDataDeserializer.class)
public abstract class EventEventSpecificData {
    
    /**
     * This is Event Data case.
     * @param eventData EventData value for eventData.
     * @return The EventDataCase object.
     */
    public static EventEventSpecificData fromEventData(EventData eventData) {
        return eventData == null ? null : new EventDataCase(eventData);
    }

    /**
     * Method to match from the provided one-of cases.
     * @param <R> The type to return after applying callback.
     * @param cases The one-of type cases callback.
     * @return The one-of matched case.
     */
    public abstract <R> R match(Cases<R> cases);

    /**
     * This is interface for one-of cases.
     * @param <R> The type to return after applying callback.
     */
    public interface Cases<R> {
        R eventData(EventData eventData);
    }

    /**
     * This is a implementation class for EventDataCase.
     */
    @JsonDeserialize(using = JsonDeserializer.None.class)
    @TypeCombinatorCase(type = "EventData")
    private static class EventDataCase extends EventEventSpecificData {

        @JsonValue
        private EventData eventData;

        EventDataCase(EventData eventData) {
            this.eventData = eventData;
        }

        @Override
        public <R> R match(Cases<R> cases) {
            return cases.eventData(this.eventData);
        }

        @JsonCreator
        private EventDataCase(JsonNode jsonNode) throws IOException {
            this.eventData = ApiHelper.deserialize(jsonNode,
                EventData.class);
        }

        @Override
        public String toString() {
            return eventData.toString();
        }
    }

    /**
     * This is a custom deserializer class for EventEventSpecificData.
     */
    protected static class EventEventSpecificDataDeserializer
            extends JsonDeserializer<EventEventSpecificData> {

        @Override
        public EventEventSpecificData deserialize(JsonParser jp, DeserializationContext ctxt)
                throws IOException, JsonProcessingException {
            ObjectCodec oc = jp.getCodec();
            JsonNode node = oc.readTree(jp);
            return ApiHelper.deserialize(node, Arrays.asList(EventDataCase.class), true);
        }
    }

}
