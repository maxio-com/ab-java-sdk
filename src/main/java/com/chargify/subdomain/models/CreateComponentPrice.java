/*
 * MaxioAdvancedBillingFormerlyChargifyAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.chargify.subdomain.models;

import com.chargify.subdomain.models.containers.CreateComponentPriceUnitPrice;
import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;

/**
 * This is a model class for CreateComponentPrice type.
 */
public class CreateComponentPrice {
    private Integer startingQuantity;
    private CreateComponentPriceUnitPrice unitPrice;

    /**
     * Default constructor.
     */
    public CreateComponentPrice() {
    }

    /**
     * Initialization constructor.
     * @param  startingQuantity  Integer value for startingQuantity.
     * @param  unitPrice  CreateComponentPriceUnitPrice value for unitPrice.
     */
    public CreateComponentPrice(
            Integer startingQuantity,
            CreateComponentPriceUnitPrice unitPrice) {
        this.startingQuantity = startingQuantity;
        this.unitPrice = unitPrice;
    }

    /**
     * Getter for StartingQuantity.
     * @return Returns the Integer
     */
    @JsonGetter("starting_quantity")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getStartingQuantity() {
        return startingQuantity;
    }

    /**
     * Setter for StartingQuantity.
     * @param startingQuantity Value for Integer
     */
    @JsonSetter("starting_quantity")
    public void setStartingQuantity(Integer startingQuantity) {
        this.startingQuantity = startingQuantity;
    }

    /**
     * Getter for UnitPrice.
     * The price can contain up to 8 decimal places. i.e. 1.00 or 0.0012 or 0.00000065
     * @return Returns the CreateComponentPriceUnitPrice
     */
    @JsonGetter("unit_price")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public CreateComponentPriceUnitPrice getUnitPrice() {
        return unitPrice;
    }

    /**
     * Setter for UnitPrice.
     * The price can contain up to 8 decimal places. i.e. 1.00 or 0.0012 or 0.00000065
     * @param unitPrice Value for CreateComponentPriceUnitPrice
     */
    @JsonSetter("unit_price")
    public void setUnitPrice(CreateComponentPriceUnitPrice unitPrice) {
        this.unitPrice = unitPrice;
    }

    /**
     * Converts this CreateComponentPrice into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "CreateComponentPrice [" + "startingQuantity=" + startingQuantity + ", unitPrice="
                + unitPrice + "]";
    }

    /**
     * Builds a new {@link CreateComponentPrice.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link CreateComponentPrice.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder()
                .startingQuantity(getStartingQuantity())
                .unitPrice(getUnitPrice());
        return builder;
    }

    /**
     * Class to build instances of {@link CreateComponentPrice}.
     */
    public static class Builder {
        private Integer startingQuantity;
        private CreateComponentPriceUnitPrice unitPrice;



        /**
         * Setter for startingQuantity.
         * @param  startingQuantity  Integer value for startingQuantity.
         * @return Builder
         */
        public Builder startingQuantity(Integer startingQuantity) {
            this.startingQuantity = startingQuantity;
            return this;
        }

        /**
         * Setter for unitPrice.
         * @param  unitPrice  CreateComponentPriceUnitPrice value for unitPrice.
         * @return Builder
         */
        public Builder unitPrice(CreateComponentPriceUnitPrice unitPrice) {
            this.unitPrice = unitPrice;
            return this;
        }

        /**
         * Builds a new {@link CreateComponentPrice} object using the set fields.
         * @return {@link CreateComponentPrice}
         */
        public CreateComponentPrice build() {
            return new CreateComponentPrice(startingQuantity, unitPrice);
        }
    }
}
