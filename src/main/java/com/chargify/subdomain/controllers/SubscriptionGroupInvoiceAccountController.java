/*
 * MaxioAdvancedBillingFormerlyChargifyAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.chargify.subdomain.controllers;

import com.chargify.subdomain.ApiHelper;
import com.chargify.subdomain.Server;
import com.chargify.subdomain.exceptions.ApiException;
import com.chargify.subdomain.exceptions.ErrorListResponseException;
import com.chargify.subdomain.http.request.HttpMethod;
import com.chargify.subdomain.models.DeductServiceCreditRequest;
import com.chargify.subdomain.models.IssueServiceCreditRequest;
import com.chargify.subdomain.models.ListSubscriptionGroupPrepaymentDateFieldEnum;
import com.chargify.subdomain.models.ListSubscriptionGroupPrepaymentResponse;
import com.chargify.subdomain.models.ServiceCredit;
import com.chargify.subdomain.models.ServiceCreditResponse;
import com.chargify.subdomain.models.SubscriptionGroupPrepaymentRequest;
import com.chargify.subdomain.models.SubscriptionGroupPrepaymentResponse;
import com.fasterxml.jackson.core.JsonProcessingException;
import io.apimatic.core.ApiCall;
import io.apimatic.core.ErrorCase;
import io.apimatic.core.GlobalConfiguration;
import java.io.IOException;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionException;

/**
 * This class lists all the endpoints of the groups.
 */
public final class SubscriptionGroupInvoiceAccountController extends BaseController {

    /**
     * Initializes the controller.
     * @param globalConfig    Configurations added in client.
     */
    public SubscriptionGroupInvoiceAccountController(GlobalConfiguration globalConfig) {
        super(globalConfig);
    }

    /**
     * A prepayment can be added for a subscription group identified by the group's `uid`. This
     * endpoint requires a `amount`, `details`, `method`, and `memo`. On success, the prepayment
     * will be added to the group's prepayment balance.
     * @param  uid  Required parameter: The uid of the subscription group
     * @param  body  Optional parameter: Example:
     * @return    Returns the SubscriptionGroupPrepaymentResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public SubscriptionGroupPrepaymentResponse createSubscriptionGroupPrepayment(
            final String uid,
            final SubscriptionGroupPrepaymentRequest body) throws ApiException, IOException {
        return prepareCreateSubscriptionGroupPrepaymentRequest(uid, body).execute();
    }

    /**
     * A prepayment can be added for a subscription group identified by the group's `uid`. This
     * endpoint requires a `amount`, `details`, `method`, and `memo`. On success, the prepayment
     * will be added to the group's prepayment balance.
     * @param  uid  Required parameter: The uid of the subscription group
     * @param  body  Optional parameter: Example:
     * @return    Returns the SubscriptionGroupPrepaymentResponse response from the API call
     */
    public CompletableFuture<SubscriptionGroupPrepaymentResponse> createSubscriptionGroupPrepaymentAsync(
            final String uid,
            final SubscriptionGroupPrepaymentRequest body) {
        try { 
            return prepareCreateSubscriptionGroupPrepaymentRequest(uid, body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for createSubscriptionGroupPrepayment.
     */
    private ApiCall<SubscriptionGroupPrepaymentResponse, ApiException> prepareCreateSubscriptionGroupPrepaymentRequest(
            final String uid,
            final SubscriptionGroupPrepaymentRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<SubscriptionGroupPrepaymentResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/subscription_groups/{uid}/prepayments.json")
                        .bodyParam(param -> param.value(body).isRequired(false))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .templateParam(param -> param.key("uid").value(uid)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, SubscriptionGroupPrepaymentResponse.class))
                        .nullify404(false)
                        .localErrorCase("422",
                                 ErrorCase.setReason("Unprocessable Entity (WebDAV)",
                                (reason, context) -> new ErrorListResponseException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * This request will list a subscription group's prepayments.
     * @param  uid  Required parameter: The uid of the subscription group
     * @param  filterDateField  Optional parameter: The type of filter you would like to apply to
     *         your search. Use in query: `filter[date_field]=created_at`.
     * @param  filterEndDate  Optional parameter: The end date (format YYYY-MM-DD) with which to
     *         filter the date_field. Returns prepayments with a timestamp up to and including
     *         11:59:59PM in your site's time zone on the date specified. Use in query:
     *         `filter[end_date]=2011-12-15`.
     * @param  filterStartDate  Optional parameter: The start date (format YYYY-MM-DD) with which to
     *         filter the date_field. Returns prepayments with a timestamp at or after midnight
     *         (12:00:00 AM) in your site's time zone on the date specified. Use in query:
     *         `filter[start_date]=2011-12-15`.
     * @param  page  Optional parameter: Result records are organized in pages. By default, the
     *         first page of results is displayed. The page parameter specifies a page number of
     *         results to fetch. You can start navigating through the pages to consume the results.
     *         You do this by passing in a page parameter. Retrieve the next page by adding ?page=2
     *         to the query string. If there are no results to return, then an empty result set will
     *         be returned. Use in query `page=1`.
     * @param  perPage  Optional parameter: This parameter indicates how many records to fetch in
     *         each request. Default value is 20. The maximum allowed values is 200; any per_page
     *         value over 200 will be changed to 200. Use in query `per_page=200`.
     * @return    Returns the ListSubscriptionGroupPrepaymentResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ListSubscriptionGroupPrepaymentResponse listPrepaymentsForSubscriptionGroup(
            final String uid,
            final ListSubscriptionGroupPrepaymentDateFieldEnum filterDateField,
            final String filterEndDate,
            final String filterStartDate,
            final Integer page,
            final Integer perPage) throws ApiException, IOException {
        return prepareListPrepaymentsForSubscriptionGroupRequest(uid, filterDateField,
                filterEndDate, filterStartDate, page, perPage).execute();
    }

    /**
     * This request will list a subscription group's prepayments.
     * @param  uid  Required parameter: The uid of the subscription group
     * @param  filterDateField  Optional parameter: The type of filter you would like to apply to
     *         your search. Use in query: `filter[date_field]=created_at`.
     * @param  filterEndDate  Optional parameter: The end date (format YYYY-MM-DD) with which to
     *         filter the date_field. Returns prepayments with a timestamp up to and including
     *         11:59:59PM in your site's time zone on the date specified. Use in query:
     *         `filter[end_date]=2011-12-15`.
     * @param  filterStartDate  Optional parameter: The start date (format YYYY-MM-DD) with which to
     *         filter the date_field. Returns prepayments with a timestamp at or after midnight
     *         (12:00:00 AM) in your site's time zone on the date specified. Use in query:
     *         `filter[start_date]=2011-12-15`.
     * @param  page  Optional parameter: Result records are organized in pages. By default, the
     *         first page of results is displayed. The page parameter specifies a page number of
     *         results to fetch. You can start navigating through the pages to consume the results.
     *         You do this by passing in a page parameter. Retrieve the next page by adding ?page=2
     *         to the query string. If there are no results to return, then an empty result set will
     *         be returned. Use in query `page=1`.
     * @param  perPage  Optional parameter: This parameter indicates how many records to fetch in
     *         each request. Default value is 20. The maximum allowed values is 200; any per_page
     *         value over 200 will be changed to 200. Use in query `per_page=200`.
     * @return    Returns the ListSubscriptionGroupPrepaymentResponse response from the API call
     */
    public CompletableFuture<ListSubscriptionGroupPrepaymentResponse> listPrepaymentsForSubscriptionGroupAsync(
            final String uid,
            final ListSubscriptionGroupPrepaymentDateFieldEnum filterDateField,
            final String filterEndDate,
            final String filterStartDate,
            final Integer page,
            final Integer perPage) {
        try { 
            return prepareListPrepaymentsForSubscriptionGroupRequest(uid, filterDateField, filterEndDate,
            filterStartDate, page, perPage).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for listPrepaymentsForSubscriptionGroup.
     */
    private ApiCall<ListSubscriptionGroupPrepaymentResponse, ApiException> prepareListPrepaymentsForSubscriptionGroupRequest(
            final String uid,
            final ListSubscriptionGroupPrepaymentDateFieldEnum filterDateField,
            final String filterEndDate,
            final String filterStartDate,
            final Integer page,
            final Integer perPage) throws IOException {
        return new ApiCall.Builder<ListSubscriptionGroupPrepaymentResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/subscription_groups/{uid}/prepayments.json")
                        .queryParam(param -> param.key("filter[date_field]")
                                .value((filterDateField != null) ? filterDateField.value() : null).isRequired(false))
                        .queryParam(param -> param.key("filter[end_date]")
                                .value(filterEndDate).isRequired(false))
                        .queryParam(param -> param.key("filter[start_date]")
                                .value(filterStartDate).isRequired(false))
                        .queryParam(param -> param.key("page")
                                .value((page != null) ? page : 1).isRequired(false))
                        .queryParam(param -> param.key("per_page")
                                .value((perPage != null) ? perPage : 20).isRequired(false))
                        .templateParam(param -> param.key("uid").value(uid)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, ListSubscriptionGroupPrepaymentResponse.class))
                        .nullify404(false)
                        .localErrorCase("401",
                                 ErrorCase.setReason("Unauthorized",
                                (reason, context) -> new ApiException(reason, context)))
                        .localErrorCase("403",
                                 ErrorCase.setReason("Forbidden",
                                (reason, context) -> new ApiException(reason, context)))
                        .localErrorCase("404",
                                 ErrorCase.setReason("Not Found",
                                (reason, context) -> new ApiException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Credit can be issued for a subscription group identified by the group's `uid`. Credit will be
     * added to the group in the amount specified in the request body. The credit will be applied to
     * group member invoices as they are generated.
     * @param  uid  Required parameter: The uid of the subscription group
     * @param  body  Optional parameter: Example:
     * @return    Returns the ServiceCreditResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ServiceCreditResponse issueSubscriptionGroupServiceCredits(
            final String uid,
            final IssueServiceCreditRequest body) throws ApiException, IOException {
        return prepareIssueSubscriptionGroupServiceCreditsRequest(uid, body).execute();
    }

    /**
     * Credit can be issued for a subscription group identified by the group's `uid`. Credit will be
     * added to the group in the amount specified in the request body. The credit will be applied to
     * group member invoices as they are generated.
     * @param  uid  Required parameter: The uid of the subscription group
     * @param  body  Optional parameter: Example:
     * @return    Returns the ServiceCreditResponse response from the API call
     */
    public CompletableFuture<ServiceCreditResponse> issueSubscriptionGroupServiceCreditsAsync(
            final String uid,
            final IssueServiceCreditRequest body) {
        try { 
            return prepareIssueSubscriptionGroupServiceCreditsRequest(uid, body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for issueSubscriptionGroupServiceCredits.
     */
    private ApiCall<ServiceCreditResponse, ApiException> prepareIssueSubscriptionGroupServiceCreditsRequest(
            final String uid,
            final IssueServiceCreditRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<ServiceCreditResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/subscription_groups/{uid}/service_credits.json")
                        .bodyParam(param -> param.value(body).isRequired(false))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .templateParam(param -> param.key("uid").value(uid)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, ServiceCreditResponse.class))
                        .nullify404(false)
                        .localErrorCase("422",
                                 ErrorCase.setReason("Unprocessable Entity (WebDAV)",
                                (reason, context) -> new ErrorListResponseException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Credit can be deducted for a subscription group identified by the group's `uid`. Credit will
     * be deducted from the group in the amount specified in the request body.
     * @param  uid  Required parameter: The uid of the subscription group
     * @param  body  Optional parameter: Example:
     * @return    Returns the ServiceCredit response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ServiceCredit deductSubscriptionGroupServiceCredits(
            final String uid,
            final DeductServiceCreditRequest body) throws ApiException, IOException {
        return prepareDeductSubscriptionGroupServiceCreditsRequest(uid, body).execute();
    }

    /**
     * Credit can be deducted for a subscription group identified by the group's `uid`. Credit will
     * be deducted from the group in the amount specified in the request body.
     * @param  uid  Required parameter: The uid of the subscription group
     * @param  body  Optional parameter: Example:
     * @return    Returns the ServiceCredit response from the API call
     */
    public CompletableFuture<ServiceCredit> deductSubscriptionGroupServiceCreditsAsync(
            final String uid,
            final DeductServiceCreditRequest body) {
        try { 
            return prepareDeductSubscriptionGroupServiceCreditsRequest(uid, body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for deductSubscriptionGroupServiceCredits.
     */
    private ApiCall<ServiceCredit, ApiException> prepareDeductSubscriptionGroupServiceCreditsRequest(
            final String uid,
            final DeductServiceCreditRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<ServiceCredit, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/subscription_groups/{uid}/service_credit_deductions.json")
                        .bodyParam(param -> param.value(body).isRequired(false))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .templateParam(param -> param.key("uid").value(uid)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, ServiceCredit.class))
                        .nullify404(false)
                        .localErrorCase("422",
                                 ErrorCase.setReason("Unprocessable Entity (WebDAV)",
                                (reason, context) -> new ErrorListResponseException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }
}