/*
 * MaxioAdvancedBillingFormerlyChargifyAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.chargify.subdomain.controllers;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;

import com.chargify.subdomain.ApiHelper;
import com.chargify.subdomain.MaxioAdvancedBillingFormerlyChargifyAPIClient;
import com.chargify.subdomain.exceptions.ApiException;
import com.chargify.subdomain.models.BasicDateFieldEnum;
import com.chargify.subdomain.models.IncludeNotNullEnum;
import com.chargify.subdomain.models.ListProductPricePointsResponse;
import com.chargify.subdomain.models.ListProductsPricePointsIncludeEnum;
import com.chargify.subdomain.models.PricePointTypeEnum;
import com.chargify.subdomain.models.containers.ListAllProductPricePointsDirection;
import io.apimatic.core.utilities.TestHelper;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.Test;

public class ProductPricePointsControllerTest extends BaseControllerTest {

    /**
     * Client instance.
     */
    private static MaxioAdvancedBillingFormerlyChargifyAPIClient client;
    
    /**
     * Controller instance (for all tests).
     */
    private static ProductPricePointsController controller;

    /**
     * Setup test class.
     */
    @BeforeClass
    public static void setUpClass() {
        client = createConfiguration();
        controller = client.getProductPricePointsController();
    }

    /**
     * Tear down test class.
     */
    @AfterClass
    public static void tearDownClass() {
        controller = null;
    }

    /**
     * This method allows retrieval of a list of Products Price Points belonging to a Site.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testTestListAllProductPricePoints() throws Exception {
        // Parameters for the API call
        ListAllProductPricePointsDirection direction = null;
        IncludeNotNullEnum filterArchivedAt = IncludeNotNullEnum.fromString(
                "not_null");
        BasicDateFieldEnum filterDateField = BasicDateFieldEnum.fromString(
                "updated_at");
        String filterEndDate = null;
        String filterEndDatetime = null;
        List<Integer> filterIds = ApiHelper.deserializeArray(
                "[1,2,3]",
                Integer[].class);
        String filterStartDate = null;
        String filterStartDatetime = null;
        List<PricePointTypeEnum> filterType = ApiHelper.deserializeArray(
                "[\r\n  \"catalog\",\r\n  \"default\"\r\n]",
                PricePointTypeEnum[].class);
        ListProductsPricePointsIncludeEnum include = ListProductsPricePointsIncludeEnum.fromString(
                "currency_prices");
        Integer page = 1;
        Integer perPage = 20;

        // Set callback and perform API call
        ListProductPricePointsResponse result = null;
        try {
            result = controller.listAllProductPricePoints(direction, filterArchivedAt, filterDateField, filterEndDate, filterEndDatetime, filterIds, filterStartDate, filterStartDatetime, filterType, include, page, perPage);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test headers
        Map<String, String> headers = new LinkedHashMap<String, String>();
        headers.put("Content-Type", "application/json");
        
        assertTrue("Headers do not match", TestHelper.areHeadersProperSubsetOf(
                headers, httpResponse.getResponse().getHeaders().asSimpleMap(), true));

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys", 
                TestHelper.isJsonObjectProperSubsetOf(
                "{\"price_points\":[{\"id\":0,\"name\":\"My pricepoint\",\"handle\":\"handle\",\"pr"
                + "ice_in_cents\":10,\"interval\":5,\"interval_unit\":\"month\",\"trial_price_in_ce"
                + "nts\":10,\"trial_interval\":1,\"trial_interval_unit\":\"month\",\"trial_type\":"
                + "\"payment_expected\",\"introductory_offer\":true,\"initial_charge_in_cents\":0,"
                + "\"initial_charge_after_trial\":true,\"expiration_interval\":0,\"expiration_inter"
                + "val_unit\":\"month\",\"product_id\":1230,\"created_at\":\"2021-04-02T17:52:09-04"
                + ":00\",\"updated_at\":\"2021-04-02T17:52:09-04:00\",\"use_site_exchange_rate\":tr"
                + "ue}]}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                false, true, false));
    }

}
