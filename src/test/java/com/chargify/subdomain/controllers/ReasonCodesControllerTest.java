/*
 * MaxioAdvancedBillingFormerlyChargifyAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.chargify.subdomain.controllers;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;

import com.chargify.subdomain.ApiHelper;
import com.chargify.subdomain.MaxioAdvancedBillingFormerlyChargifyAPIClient;
import com.chargify.subdomain.exceptions.ApiException;
import com.chargify.subdomain.models.CreateReasonCodeRequest;
import com.chargify.subdomain.models.ReasonCodeResponse;
import io.apimatic.core.utilities.TestHelper;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.Test;

public class ReasonCodesControllerTest extends BaseControllerTest {

    /**
     * Client instance.
     */
    private static MaxioAdvancedBillingFormerlyChargifyAPIClient client;
    
    /**
     * Controller instance (for all tests).
     */
    private static ReasonCodesController controller;

    /**
     * Setup test class.
     */
    @BeforeClass
    public static void setUpClass() {
        client = createConfiguration();
        controller = client.getReasonCodesController();
    }

    /**
     * Tear down test class.
     */
    @AfterClass
    public static void tearDownClass() {
        controller = null;
    }

    /**
     * # Reason Codes Intro ReasonCodes are a way to gain a high level view of why your customers
     * are cancelling the subcription to your product or service. Add a set of churn reason codes to
     * be displayed in-app and/or the Chargify Billing Portal. As your subscribers decide to cancel
     * their subscription, learn why they decided to cancel. ## Reason Code Documentation Full
     * documentation on how Reason Codes operate within Chargify can be located under the following
     * links. [Churn Reason
     * Codes](https://chargify.zendesk.com/hc/en-us/articles/4407896775579#churn-reason-codes) ##
     * Create Reason Code This method gives a merchant the option to create a reason codes for a
     * given Site.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testTestCreateReasonCode() throws Exception {
        // Parameters for the API call
        CreateReasonCodeRequest body = ApiHelper.deserialize(
                "{\"reason_code\":{\"code\":\"NOTHANKYOU\",\"description\":\"No thank you!\",\"posi"
                + "tion\":5}}",
                CreateReasonCodeRequest.class);

        // Set callback and perform API call
        try {
            controller.createReasonCode(body);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test headers
        Map<String, String> headers = new LinkedHashMap<String, String>();
        headers.put("Content-Type", "application/json");
        
        assertTrue("Headers do not match", TestHelper.areHeadersProperSubsetOf(
                headers, httpResponse.getResponse().getHeaders().asSimpleMap(), true));

    }

    /**
     * This method gives a merchant the option to retrieve a list of all of the current churn codes
     * for a given site.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testTestListReasonCodes() throws Exception {
        // Parameters for the API call
        Integer page = 1;
        Integer perPage = 20;

        // Set callback and perform API call
        List<ReasonCodeResponse> result = null;
        try {
            result = controller.listReasonCodes(page, perPage);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test headers
        Map<String, String> headers = new LinkedHashMap<String, String>();
        headers.put("Content-Type", "application/json");
        
        assertTrue("Headers do not match", TestHelper.areHeadersProperSubsetOf(
                headers, httpResponse.getResponse().getHeaders().asSimpleMap(), true));

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys",
                TestHelper.isArrayOfJsonObjectsProperSubsetOf(
                "[{\"reason_code\":{\"id\":2,\"site_id\":2,\"code\":\"LARGE\",\"description\":\"Thi"
                + "s is too complicated\",\"position\":1,\"created_at\":\"2017-02-16T16:49:07-05:00"
                + "\",\"updated_at\":\"2017-02-17T16:29:51-05:00\"}},{\"reason_code\":{\"id\":1,\"s"
                + "ite_id\":2,\"code\":\"CH1\",\"description\":\"This doesnt meet my needs\",\"posi"
                + "tion\":2,\"created_at\":\"2017-02-16T16:48:45-05:00\",\"updated_at\":\"2017-02-1"
                + "7T16:29:59-05:00\"}},{\"reason_code\":{\"id\":5,\"site_id\":2,\"code\":\"HAN99"
                + "\",\"description\":\"Hard to setup\",\"position\":3,\"created_at\":\"2017-02-17T"
                + "16:29:42-05:00\",\"updated_at\":\"2017-02-17T16:29:59-05:00\"}}]",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                false, true, false));
    }

}
