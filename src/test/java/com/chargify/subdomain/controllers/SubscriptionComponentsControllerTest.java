/*
 * MaxioAdvancedBillingFormerlyChargifyAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.chargify.subdomain.controllers;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;

import com.chargify.subdomain.ApiHelper;
import com.chargify.subdomain.MaxioAdvancedBillingFormerlyChargifyAPIClient;
import com.chargify.subdomain.exceptions.ApiException;
import com.chargify.subdomain.models.IncludeNotNullEnum;
import com.chargify.subdomain.models.ListSubscriptionComponentsDateFieldEnum;
import com.chargify.subdomain.models.ListSubscriptionComponentsIncludeEnum;
import com.chargify.subdomain.models.ListSubscriptionComponentsSortEnum;
import com.chargify.subdomain.models.ListSubscriptionComponentsSubscriptionDateFieldEnum;
import com.chargify.subdomain.models.SubscriptionStateEnum;
import com.chargify.subdomain.models.containers.ListSubscriptionComponentsForSiteDirection;
import io.apimatic.core.utilities.TestHelper;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.Test;

public class SubscriptionComponentsControllerTest extends BaseControllerTest {

    /**
     * Client instance.
     */
    private static MaxioAdvancedBillingFormerlyChargifyAPIClient client;
    
    /**
     * Controller instance (for all tests).
     */
    private static SubscriptionComponentsController controller;

    /**
     * Setup test class.
     */
    @BeforeClass
    public static void setUpClass() {
        client = createConfiguration();
        controller = client.getSubscriptionComponentsController();
    }

    /**
     * Tear down test class.
     */
    @AfterClass
    public static void tearDownClass() {
        controller = null;
    }

    /**
     * This request will list components applied to each subscription.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testTestListSubscriptionComponentsForSite() throws Exception {
        // Parameters for the API call
        Integer page = 1;
        Integer perPage = 20;
        ListSubscriptionComponentsSortEnum sort = ListSubscriptionComponentsSortEnum.fromString(
                "updated_at");
        ListSubscriptionComponentsForSiteDirection direction = null;
        ListSubscriptionComponentsDateFieldEnum dateField = ListSubscriptionComponentsDateFieldEnum.fromString(
                "updated_at");
        String startDate = null;
        String startDatetime = null;
        String endDate = null;
        String endDatetime = null;
        List<Integer> subscriptionIds = ApiHelper.deserializeArray(
                "[1,2,3]",
                Integer[].class);
        IncludeNotNullEnum pricePointIds = IncludeNotNullEnum.fromString(
                "not_null");
        List<Integer> productFamilyIds = ApiHelper.deserializeArray(
                "[1,2,3]",
                Integer[].class);
        ListSubscriptionComponentsIncludeEnum include = ListSubscriptionComponentsIncludeEnum.fromString(
                "subscription");
        Boolean filterUseSiteExchangeRate = true;
        List<String> filterCurrencies = ApiHelper.deserializeArray(
                "[\"EUR\",\"USD\"]",
                String[].class);
        List<SubscriptionStateEnum> filterSubscriptionStates = ApiHelper.deserializeArray(
                "[\"active\",\"canceled\"]",
                SubscriptionStateEnum[].class);
        ListSubscriptionComponentsSubscriptionDateFieldEnum filterSubscriptionDateField = ListSubscriptionComponentsSubscriptionDateFieldEnum.fromString(
                "updated_at");
        String filterSubscriptionStartDate = null;
        String filterSubscriptionStartDatetime = null;
        String filterSubscriptionEndDate = null;
        String filterSubscriptionEndDatetime = null;

        // Set callback and perform API call
        try {
            controller.listSubscriptionComponentsForSite(page, perPage, sort, direction, dateField, startDate, startDatetime, endDate, endDatetime, subscriptionIds, pricePointIds, productFamilyIds, include, filterUseSiteExchangeRate, filterCurrencies, filterSubscriptionStates, filterSubscriptionDateField, filterSubscriptionStartDate, filterSubscriptionStartDatetime, filterSubscriptionEndDate, filterSubscriptionEndDatetime);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test headers
        Map<String, String> headers = new LinkedHashMap<String, String>();
        headers.put("Content-Type", "application/json");
        
        assertTrue("Headers do not match", TestHelper.areHeadersProperSubsetOf(
                headers, httpResponse.getResponse().getHeaders().asSimpleMap(), true));

    }

}
