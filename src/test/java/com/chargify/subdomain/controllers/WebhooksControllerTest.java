/*
 * MaxioAdvancedBillingFormerlyChargifyAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.chargify.subdomain.controllers;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;

import com.chargify.subdomain.ApiHelper;
import com.chargify.subdomain.MaxioAdvancedBillingFormerlyChargifyAPIClient;
import com.chargify.subdomain.exceptions.ApiException;
import com.chargify.subdomain.models.EnableWebhooksRequest;
import com.chargify.subdomain.models.EnableWebhooksResponse;
import com.chargify.subdomain.models.Endpoint;
import com.chargify.subdomain.models.EndpointResponse;
import com.chargify.subdomain.models.ReplayWebhooksRequest;
import com.chargify.subdomain.models.ReplayWebhooksResponse;
import com.chargify.subdomain.models.UpdateEndpointRequest;
import com.chargify.subdomain.models.WebhookOrderEnum;
import com.chargify.subdomain.models.WebhookResponse;
import com.chargify.subdomain.models.WebhookStatusEnum;
import io.apimatic.core.utilities.TestHelper;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.Test;

public class WebhooksControllerTest extends BaseControllerTest {

    /**
     * Client instance.
     */
    private static MaxioAdvancedBillingFormerlyChargifyAPIClient client;
    
    /**
     * Controller instance (for all tests).
     */
    private static WebhooksController controller;

    /**
     * Setup test class.
     */
    @BeforeClass
    public static void setUpClass() {
        client = createConfiguration();
        controller = client.getWebhooksController();
    }

    /**
     * Tear down test class.
     */
    @AfterClass
    public static void tearDownClass() {
        controller = null;
    }

    /**
     * ## Webhooks Intro The Webhooks API allows you to view a list of all webhooks and to
     * selectively resend individual or groups of webhooks. Webhooks will be sent on endpoints
     * specified by you. Endpoints can be added via API or Web UI. There is also an option to enable
     * / disable webhooks via API request. We recommend that you review Chargify's webhook
     * documentation located in our help site. The following resources will help guide you on how to
     * use webhooks in Chargify, in addition to these webhook endpoints: + [Adding/editing new
     * webhooks](https://maxio-chargify.zendesk.com/hc/en-us/articles/5404448450317#configure-webhook-url)
     * + [Webhooks introduction and delivery
     * information](https://maxio-chargify.zendesk.com/hc/en-us/articles/5405568068365#webhooks-introduction-0-0)
     * + [Main webhook
     * overview](https://maxio-chargify.zendesk.com/hc/en-us/articles/5405357509645-Webhooks-Reference#webhooks-reference-0-0)
     * + [Available webhooks and
     * payloads](https://maxio-chargify.zendesk.com/hc/en-us/articles/5405357509645-Webhooks-Reference#events)
     * ## List Webhooks for a Site This method allows you to fetch data about webhooks. You can pass
     * query parameters if you want to filter webhooks.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testTestListWebhooks() throws Exception {
        // Parameters for the API call
        WebhookStatusEnum status = null;
        String sinceDate = null;
        String untilDate = null;
        Integer page = 1;
        Integer perPage = 20;
        WebhookOrderEnum order = null;
        Integer subscription = null;

        // Set callback and perform API call
        List<WebhookResponse> result = null;
        try {
            result = controller.listWebhooks(status, sinceDate, untilDate, page, perPage, order, subscription);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 201", 
                201, httpResponse.getResponse().getStatusCode());

        // Test headers
        Map<String, String> headers = new LinkedHashMap<String, String>();
        headers.put("Content-Type", "application/json");
        
        assertTrue("Headers do not match", TestHelper.areHeadersProperSubsetOf(
                headers, httpResponse.getResponse().getHeaders().asSimpleMap(), true));

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys",
                TestHelper.isArrayOfJsonObjectsProperSubsetOf(
                "[{\"webhook\":{\"event\":\"statement_settled\",\"id\":141765032,\"created_at\":\"2"
                + "016-11-08T16:22:26-05:00\",\"last_error\":\"404 Resource Not Found (retry 5 of 5"
                + ")\",\"last_error_at\":\"2016-11-08T16:43:54-05:00\",\"accepted_at\":null,\"last_"
                + "sent_at\":\"2016-11-08T16:43:54-05:00\",\"last_sent_url\":\"http://requestb.in/1"
                + "1u45x71\",\"successful\":false,\"body\":\"id=141765032&event=statement_settled&p"
                + "ayload[site][id]=31615&payload[site][subdomain]=general-goods&payload[subscripti"
                + "on][id]=15100141&payload[subscription][state]=active&payload[subscription][balan"
                + "ce_in_cents]=0&payload[customer][id]=14585695&payload[customer][first_name]=Pook"
                + "ie&payload[customer][last_name]=Test&payload[customer][reference]=&payload[custo"
                + "mer][organization]=&payload[customer][address]=&payload[customer][address_2]=&pa"
                + "yload[customer][city]=&payload[customer][state]=&payload[customer][zip]=&payload"
                + "[customer][country]=&payload[customer][email]=pookie999%40example.com&payload[cu"
                + "stomer][phone]=&payload[statement][closed_at]=2016-11-08%2016%3A22%3A20%20-0500&"
                + "payload[statement][created_at]=2016-11-08%2016%3A22%3A18%20-0500&payload[stateme"
                + "nt][id]=80168049&payload[statement][opened_at]=2016-11-07%2016%3A22%3A15%20-0500"
                + "&payload[statement][settled_at]=2016-11-08%2016%3A22%3A20%20-0500&payload[statem"
                + "ent][subscription_id]=15100141&payload[statement][updated_at]=2016-11-08%2016%3A"
                + "22%3A20%20-0500&payload[statement][starting_balance_in_cents]=0&payload[statemen"
                + "t][ending_balance_in_cents]=0&payload[statement][total_in_cents]=6400&payload[st"
                + "atement][memo]=We%20thank%20you%20for%20your%20continued%20business!&payload[sta"
                + "tement][events][0][id]=346956565&payload[statement][events][0][key]=renewal_succ"
                + "ess&payload[statement][events][0][message]=Successful%20renewal%20for%20Pookie%2"
                + "0Test's%20subscription%20to%20%2410%20Basic%20Plan&payload[statement][events][1]"
                + "[id]=346956579&payload[statement][events][1][key]=payment_success&payload[statem"
                + "ent][events][1][message]=Successful%20payment%20of%20%2464.00%20for%20Pookie%20T"
                + "est's%20subscription%20to%20%2410%20Basic%20Plan&payload[statement][events][2][i"
                + "d]=347299359&payload[statement][events][2][key]=renewal_success&payload[statemen"
                + "t][events][2][message]=Successful%20renewal%20for%20Pookie%20Test's%20subscripti"
                + "on%20to%20%2410%20Basic%20Plan&payload[statement][transactions][0][id]=161537343"
                + "&payload[statement][transactions][0][subscription_id]=15100141&payload[statement"
                + "][transactions][0][type]=Charge&payload[statement][transactions][0][kind]=baseli"
                + "ne&payload[statement][transactions][0][transaction_type]=charge&payload[statemen"
                + "t][transactions][0][success]=true&payload[statement][transactions][0][amount_in_"
                + "cents]=1000&payload[statement][transactions][0][memo]=%2410%20Basic%20Plan%20(11"
                + "%2F08%2F2016%20-%2011%2F09%2F2016)&payload[statement][transactions][0][created_a"
                + "t]=2016-11-08%2016%3A22%3A18%20-0500&payload[statement][transactions][0][startin"
                + "g_balance_in_cents]=0&payload[statement][transactions][0][ending_balance_in_cent"
                + "s]=1000&payload[statement][transactions][0][gateway_used]=&payload[statement][tr"
                + "ansactions][0][gateway_transaction_id]=&payload[statement][transactions][0][gate"
                + "way_order_id]=&payload[statement][transactions][0][payment_id]=161537369&payload"
                + "[statement][transactions][0][product_id]=3792003&payload[statement][transactions"
                + "][0][tax_id]=&payload[statement][transactions][0][component_id]=&payload[stateme"
                + "nt][transactions][0][statement_id]=80168049&payload[statement][transactions][0]["
                + "customer_id]=14585695&payload[statement][transactions][0][original_amount_in_cen"
                + "ts]=&payload[statement][transactions][0][discount_amount_in_cents]=&payload[stat"
                + "ement][transactions][0][taxable_amount_in_cents]=&payload[statement][transaction"
                + "s][1][id]=161537344&payload[statement][transactions][1][subscription_id]=1510014"
                + "1&payload[statement][transactions][1][type]=Charge&payload[statement][transactio"
                + "ns][1][kind]=quantity_based_component&payload[statement][transactions][1][transa"
                + "ction_type]=charge&payload[statement][transactions][1][success]=true&payload[sta"
                + "tement][transactions][1][amount_in_cents]=5400&payload[statement][transactions]["
                + "1][memo]=Timesheet%20Users%3A%2018%20Timesheet%20Users&payload[statement][transa"
                + "ctions][1][created_at]=2016-11-08%2016%3A22%3A18%20-0500&payload[statement][tran"
                + "sactions][1][starting_balance_in_cents]=1000&payload[statement][transactions][1]"
                + "[ending_balance_in_cents]=6400&payload[statement][transactions][1][gateway_used]"
                + "=&payload[statement][transactions][1][gateway_transaction_id]=&payload[statement"
                + "][transactions][1][gateway_order_id]=&payload[statement][transactions][1][paymen"
                + "t_id]=161537369&payload[statement][transactions][1][product_id]=3792003&payload["
                + "statement][transactions][1][tax_id]=&payload[statement][transactions][1][compone"
                + "nt_id]=277221&payload[statement][transactions][1][statement_id]=80168049&payload"
                + "[statement][transactions][1][customer_id]=14585695&payload[statement][transactio"
                + "ns][1][original_amount_in_cents]=&payload[statement][transactions][1][discount_a"
                + "mount_in_cents]=&payload[statement][transactions][1][taxable_amount_in_cents]=&p"
                + "ayload[statement][transactions][2][id]=161537369&payload[statement][transactions"
                + "][2][subscription_id]=15100141&payload[statement][transactions][2][type]=Payment"
                + "&payload[statement][transactions][2][kind]=&payload[statement][transactions][2]["
                + "transaction_type]=payment&payload[statement][transactions][2][success]=true&payl"
                + "oad[statement][transactions][2][amount_in_cents]=6400&payload[statement][transac"
                + "tions][2][memo]=Pookie%20Test%20-%20%2410%20Basic%20Plan%3A%20Renewal%20payment&"
                + "payload[statement][transactions][2][created_at]=2016-11-08%2016%3A22%3A20%20-050"
                + "0&payload[statement][transactions][2][starting_balance_in_cents]=6400&payload[st"
                + "atement][transactions][2][ending_balance_in_cents]=0&payload[statement][transact"
                + "ions][2][gateway_used]=bogus&payload[statement][transactions][2][gateway_transac"
                + "tion_id]=53433&payload[statement][transactions][2][gateway_order_id]=&payload[st"
                + "atement][transactions][2][payment_id]=&payload[statement][transactions][2][produ"
                + "ct_id]=3792003&payload[statement][transactions][2][tax_id]=&payload[statement][t"
                + "ransactions][2][component_id]=&payload[statement][transactions][2][statement_id]"
                + "=80168049&payload[statement][transactions][2][customer_id]=14585695&payload[stat"
                + "ement][transactions][2][card_number]=XXXX-XXXX-XXXX-1&payload[statement][transac"
                + "tions][2][card_expiration]=10%2F2020&payload[statement][transactions][2][card_ty"
                + "pe]=bogus&payload[statement][transactions][2][refunded_amount_in_cents]=0&payloa"
                + "d[product][id]=3792003&payload[product][name]=%2410%20Basic%20Plan&payload[produ"
                + "ct_family][id]=527890&payload[product_family][name]=Acme%20Projects&payload[paym"
                + "ent_profile][id]=10102821&payload[payment_profile][first_name]=Pookie&payload[pa"
                + "yment_profile][last_name]=Test&payload[payment_profile][billing_address]=&payloa"
                + "d[payment_profile][billing_address_2]=&payload[payment_profile][billing_city]=&p"
                + "ayload[payment_profile][billing_country]=&payload[payment_profile][billing_state"
                + "]=&payload[payment_profile][billing_zip]=&payload[event_id]=347299384\",\"signat"
                + "ure\":\"7c606ec4628ce75ec46e284097ce163a\",\"signature_hmac_sha_256\":\"40f25e83"
                + "dd324508bb2149e3e525821922fb210535ebfbfa81e7ab951996b41d\"}},{\"webhook\":{\"eve"
                + "nt\":\"payment_success\",\"id\":141765008,\"created_at\":\"2016-11-08T16:22:25-0"
                + "5:00\",\"last_error\":\"404 Resource Not Found (retry 5 of 5)\",\"last_error_at"
                + "\":\"2016-11-08T16:43:54-05:00\",\"accepted_at\":null,\"last_sent_at\":\"2016-11"
                + "-08T16:43:54-05:00\",\"last_sent_url\":\"http://requestb.in/11u45x71\",\"success"
                + "ful\":false,\"body\":\"id=141765008&event=payment_success&payload[site][id]=3161"
                + "5&payload[site][subdomain]=general-goods&payload[subscription][id]=15100141&payl"
                + "oad[subscription][state]=active&payload[subscription][trial_started_at]=&payload"
                + "[subscription][trial_ended_at]=&payload[subscription][activated_at]=2016-11-04%2"
                + "017%3A06%3A43%20-0400&payload[subscription][created_at]=2016-11-04%2017%3A06%3A4"
                + "2%20-0400&payload[subscription][updated_at]=2016-11-08%2016%3A22%3A22%20-0500&pa"
                + "yload[subscription][expires_at]=&payload[subscription][balance_in_cents]=0&paylo"
                + "ad[subscription][current_period_ends_at]=2016-11-09%2016%3A06%3A42%20-0500&paylo"
                + "ad[subscription][next_assessment_at]=2016-11-09%2016%3A06%3A42%20-0500&payload[s"
                + "ubscription][canceled_at]=&payload[subscription][cancellation_message]=&payload["
                + "subscription][next_product_id]=&payload[subscription][cancel_at_end_of_period]=f"
                + "alse&payload[subscription][payment_collection_method]=automatic&payload[subscrip"
                + "tion][snap_day]=&payload[subscription][cancellation_method]=&payload[subscriptio"
                + "n][current_period_started_at]=2016-11-08%2016%3A06%3A42%20-0500&payload[subscrip"
                + "tion][previous_state]=active&payload[subscription][signup_payment_id]=161034048&"
                + "payload[subscription][signup_revenue]=64.00&payload[subscription][delayed_cancel"
                + "_at]=&payload[subscription][coupon_code]=&payload[subscription][total_revenue_in"
                + "_cents]=32000&payload[subscription][product_price_in_cents]=1000&payload[subscri"
                + "ption][product_version_number]=7&payload[subscription][payment_type]=credit_card"
                + "&payload[subscription][referral_code]=pggn84&payload[subscription][coupon_use_co"
                + "unt]=&payload[subscription][coupon_uses_allowed]=&payload[subscription][customer"
                + "][id]=14585695&payload[subscription][customer][first_name]=Test&payload[subscrip"
                + "tion][customer][last_name]=Test&payload[subscription][customer][organization]=&p"
                + "ayload[subscription][customer][email]=pookie999%40example.com&payload[subscripti"
                + "on][customer][created_at]=2016-11-04%2017%3A06%3A42%20-0400&payload[subscription"
                + "][customer][updated_at]=2016-11-04%2017%3A06%3A45%20-0400&payload[subscription]["
                + "customer][reference]=&payload[subscription][customer][address]=&payload[subscrip"
                + "tion][customer][address_2]=&payload[subscription][customer][city]=&payload[subsc"
                + "ription][customer][state]=&payload[subscription][customer][zip]=&payload[subscri"
                + "ption][customer][country]=&payload[subscription][customer][phone]=&payload[subsc"
                + "ription][customer][portal_invite_last_sent_at]=2016-11-04%2017%3A06%3A45%20-0400"
                + "&payload[subscription][customer][portal_invite_last_accepted_at]=&payload[subscr"
                + "iption][customer][verified]=false&payload[subscription][customer][portal_custome"
                + "r_created_at]=2016-11-04%2017%3A06%3A45%20-0400&payload[subscription][customer]["
                + "cc_emails]=&payload[subscription][product][id]=3792003&payload[subscription][pro"
                + "duct][name]=%2410%20Basic%20Plan&payload[subscription][product][handle]=basic&pa"
                + "yload[subscription][product][description]=lorem%20ipsum&payload[subscription][pr"
                + "oduct][accounting_code]=basic&payload[subscription][product][request_credit_card"
                + "]=false&payload[subscription][product][expiration_interval]=&payload[subscriptio"
                + "n][product][expiration_interval_unit]=never&payload[subscription][product][creat"
                + "ed_at]=2016-03-24%2013%3A38%3A39%20-0400&payload[subscription][product][updated_"
                + "at]=2016-11-03%2013%3A03%3A05%20-0400&payload[subscription][product][price_in_ce"
                + "nts]=1000&payload[subscription][product][interval]=1&payload[subscription][produ"
                + "ct][interval_unit]=day&payload[subscription][product][initial_charge_in_cents]=&"
                + "payload[subscription][product][trial_price_in_cents]=&payload[subscription][prod"
                + "uct][trial_interval]=&payload[subscription][product][trial_interval_unit]=month&"
                + "payload[subscription][product][archived_at]=&payload[subscription][product][requ"
                + "ire_credit_card]=false&payload[subscription][product][return_params]=&payload[su"
                + "bscription][product][taxable]=false&payload[subscription][product][update_return"
                + "_url]=&payload[subscription][product][initial_charge_after_trial]=false&payload["
                + "subscription][product][version_number]=7&payload[subscription][product][update_r"
                + "eturn_params]=&payload[subscription][product][product_family][id]=527890&payload"
                + "[subscription][product][product_family][name]=Acme%20Projects&payload[subscripti"
                + "on][product][product_family][description]=&payload[subscription][product][produc"
                + "t_family][handle]=billing-plans&payload[subscription][product][product_family][a"
                + "ccounting_code]=&payload[subscription][product][public_signup_pages][id]=281054&"
                + "payload[subscription][product][public_signup_pages][return_url]=http%3A%2F%2Fwww"
                + ".example.com%3Fsuccessfulsignup&payload[subscription][product][public_signup_pag"
                + "es][return_params]=&payload[subscription][product][public_signup_pages][url]=htt"
                + "ps%3A%2F%2Fgeneral-goods.chargify.com%2Fsubscribe%2Fkqvmfrbgd89q%2Fbasic&payload"
                + "[subscription][product][public_signup_pages][id]=281240&payload[subscription][pr"
                + "oduct][public_signup_pages][return_url]=&payload[subscription][product][public_s"
                + "ignup_pages][return_params]=&payload[subscription][product][public_signup_pages]"
                + "[url]=https%3A%2F%2Fgeneral-goods.chargify.com%2Fsubscribe%2Fdkffht5dxfd8%2Fbasi"
                + "c&payload[subscription][product][public_signup_pages][id]=282694&payload[subscri"
                + "ption][product][public_signup_pages][return_url]=&payload[subscription][product]"
                + "[public_signup_pages][return_params]=&payload[subscription][product][public_sign"
                + "up_pages][url]=https%3A%2F%2Fgeneral-goods.chargify.com%2Fsubscribe%2Fjwffwgdd95"
                + "s8%2Fbasic&payload[subscription][credit_card][id]=10102821&payload[subscription]"
                + "[credit_card][first_name]=Pookie&payload[subscription][credit_card][last_name]=T"
                + "est&payload[subscription][credit_card][masked_card_number]=XXXX-XXXX-XXXX-1&payl"
                + "oad[subscription][credit_card][card_type]=bogus&payload[subscription][credit_car"
                + "d][expiration_month]=10&payload[subscription][credit_card][expiration_year]=2020"
                + "&payload[subscription][credit_card][customer_id]=14585695&payload[subscription]["
                + "credit_card][current_vault]=bogus&payload[subscription][credit_card][vault_token"
                + "]=1&payload[subscription][credit_card][billing_address]=&payload[subscription][c"
                + "redit_card][billing_city]=&payload[subscription][credit_card][billing_state]=&pa"
                + "yload[subscription][credit_card][billing_zip]=&payload[subscription][credit_card"
                + "][billing_country]=&payload[subscription][credit_card][customer_vault_token]=&pa"
                + "yload[subscription][credit_card][billing_address_2]=&payload[subscription][credi"
                + "t_card][payment_type]=credit_card&payload[subscription][credit_card][site_gatewa"
                + "y_setting_id]=&payload[subscription][credit_card][gateway_handle]=&payload[trans"
                + "action][id]=161537369&payload[transaction][subscription_id]=15100141&payload[tra"
                + "nsaction][type]=Payment&payload[transaction][kind]=&payload[transaction][transac"
                + "tion_type]=payment&payload[transaction][success]=true&payload[transaction][amoun"
                + "t_in_cents]=6400&payload[transaction][memo]=Pookie%20Test%20-%20%2410%20Basic%20"
                + "Plan%3A%20Renewal%20payment&payload[transaction][created_at]=2016-11-08%2016%3A2"
                + "2%3A20%20-0500&payload[transaction][starting_balance_in_cents]=6400&payload[tran"
                + "saction][ending_balance_in_cents]=0&payload[transaction][gateway_used]=bogus&pay"
                + "load[transaction][gateway_transaction_id]=53433&payload[transaction][gateway_res"
                + "ponse_code]=&payload[transaction][gateway_order_id]=&payload[transaction][paymen"
                + "t_id]=&payload[transaction][product_id]=3792003&payload[transaction][tax_id]=&pa"
                + "yload[transaction][component_id]=&payload[transaction][statement_id]=80168049&pa"
                + "yload[transaction][customer_id]=14585695&payload[transaction][card_number]=XXXX-"
                + "XXXX-XXXX-1&payload[transaction][card_expiration]=10%2F2020&payload[transaction]"
                + "[card_type]=bogus&payload[transaction][refunded_amount_in_cents]=0&payload[trans"
                + "action][invoice_id]=&payload[event_id]=347299364\",\"signature\":\"fbcf2f6be579f"
                + "9658cff90c4373e0ca2\",\"signature_hmac_sha_256\":\"db96654f5456c5460062feb944ac8"
                + "bb1418f9d181ae04a8ed982fe9ffdca8de1\"}}]",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                false, true, false));
    }

    /**
     * This method allows you to enable webhooks via API for your site.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testTestEnableWebhooks() throws Exception {
        // Parameters for the API call
        EnableWebhooksRequest body = ApiHelper.deserialize(
                "{\"webhooks_enabled\":true}",
                EnableWebhooksRequest.class);

        // Set callback and perform API call
        EnableWebhooksResponse result = null;
        try {
            result = controller.enableWebhooks(body);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test headers
        Map<String, String> headers = new LinkedHashMap<String, String>();
        headers.put("Content-Type", "application/json");
        
        assertTrue("Headers do not match", TestHelper.areHeadersProperSubsetOf(
                headers, httpResponse.getResponse().getHeaders().asSimpleMap(), true));

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys", 
                TestHelper.isJsonObjectProperSubsetOf(
                "{\"webhooks_enabled\":true}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                false, true, false));
    }

    /**
     * Posting to the replay endpoint does not immediately resend the webhooks. They are added to a
     * queue and will be sent as soon as possible, depending on available system resources. You may
     * submit an array of up to 1000 webhook IDs to replay in the request.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testTestReplayWebhooks() throws Exception {
        // Parameters for the API call
        ReplayWebhooksRequest body = ApiHelper.deserialize(
                "{\"ids\":[123456789,123456788]}",
                ReplayWebhooksRequest.class);

        // Set callback and perform API call
        ReplayWebhooksResponse result = null;
        try {
            result = controller.replayWebhooks(body);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test headers
        Map<String, String> headers = new LinkedHashMap<String, String>();
        headers.put("Content-Type", "application/json");
        
        assertTrue("Headers do not match", TestHelper.areHeadersProperSubsetOf(
                headers, httpResponse.getResponse().getHeaders().asSimpleMap(), true));

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys", 
                TestHelper.isJsonObjectProperSubsetOf(
                "{\"status\":\"ok\"}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                false, true, false));
    }

    /**
     * The Chargify API allows you to create an endpoint and assign a list of webhooks subscriptions
     * (events) to it. You can check available events here. [Event
     * keys](https://maxio-chargify.zendesk.com/hc/en-us/articles/5405357509645-Webhooks-Reference#example-payloads).
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testTestCreateEndpoint() throws Exception {
        // Parameters for the API call
        UpdateEndpointRequest body = ApiHelper.deserialize(
                "{\"endpoint\":{\"url\":\"https://your.site/webhooks\",\"webhook_subscriptions\":["
                + "\"payment_success\",\"payment_failure\"]}}",
                UpdateEndpointRequest.class);

        // Set callback and perform API call
        EndpointResponse result = null;
        try {
            result = controller.createEndpoint(body);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test headers
        Map<String, String> headers = new LinkedHashMap<String, String>();
        headers.put("Content-Type", "application/json");
        
        assertTrue("Headers do not match", TestHelper.areHeadersProperSubsetOf(
                headers, httpResponse.getResponse().getHeaders().asSimpleMap(), true));

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys", 
                TestHelper.isJsonObjectProperSubsetOf(
                "{\"endpoint\":{\"id\":1,\"url\":\"https://your.site/webhooks\",\"site_id\":1,\"sta"
                + "tus\":\"enabled\",\"webhook_subscriptions\":[\"payment_success\",\"payment_failu"
                + "re\"]}}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                false, true, false));
    }

    /**
     * This method returns created endpoints for site.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testTestListEndpoints() throws Exception {

        // Set callback and perform API call
        List<Endpoint> result = null;
        try {
            result = controller.listEndpoints();
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test headers
        Map<String, String> headers = new LinkedHashMap<String, String>();
        headers.put("Content-Type", "application/json");
        
        assertTrue("Headers do not match", TestHelper.areHeadersProperSubsetOf(
                headers, httpResponse.getResponse().getHeaders().asSimpleMap(), true));

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys",
                TestHelper.isArrayOfJsonObjectsProperSubsetOf(
                "[{\"id\":11,\"url\":\"https://foobar.com/webhooks\",\"site_id\":1,\"status\":\"ena"
                + "bled\",\"webhook_subscriptions\":[\"payment_success\",\"payment_failure\"]},{\"i"
                + "d\":12,\"url\":\"https:/example.com/webhooks\",\"site_id\":1,\"status\":\"enable"
                + "d\",\"webhook_subscriptions\":[\"payment_success\",\"payment_failure\",\"refund_"
                + "failure\"]}]",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                false, true, false));
    }

}
