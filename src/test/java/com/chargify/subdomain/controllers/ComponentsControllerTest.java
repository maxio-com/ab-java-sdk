/*
 * MaxioAdvancedBillingFormerlyChargifyAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.chargify.subdomain.controllers;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;

import com.chargify.subdomain.ApiHelper;
import com.chargify.subdomain.MaxioAdvancedBillingFormerlyChargifyAPIClient;
import com.chargify.subdomain.exceptions.ApiException;
import com.chargify.subdomain.models.BasicDateFieldEnum;
import com.chargify.subdomain.models.ComponentResponse;
import com.chargify.subdomain.models.IncludeNotNullEnum;
import com.chargify.subdomain.models.ListComponentsPricePointsIncludeEnum;
import com.chargify.subdomain.models.ListComponentsPricePointsResponse;
import com.chargify.subdomain.models.PricePointTypeEnum;
import com.chargify.subdomain.models.containers.ListAllComponentPricePointsDirection;
import io.apimatic.core.utilities.TestHelper;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.Test;

public class ComponentsControllerTest extends BaseControllerTest {

    /**
     * Client instance.
     */
    private static MaxioAdvancedBillingFormerlyChargifyAPIClient client;
    
    /**
     * Controller instance (for all tests).
     */
    private static ComponentsController controller;

    /**
     * Setup test class.
     */
    @BeforeClass
    public static void setUpClass() {
        client = createConfiguration();
        controller = client.getComponentsController();
    }

    /**
     * Tear down test class.
     */
    @AfterClass
    public static void tearDownClass() {
        controller = null;
    }

    /**
     * This request will return a list of components for a site.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testTestListComponents() throws Exception {
        // Parameters for the API call
        BasicDateFieldEnum dateField = BasicDateFieldEnum.fromString(
                "updated_at");
        String startDate = null;
        String endDate = null;
        String startDatetime = null;
        String endDatetime = null;
        Boolean includeArchived = null;
        Integer page = 1;
        Integer perPage = 20;
        List<String> filterIds = ApiHelper.deserializeArray(
                "[\"1\",\"2\",\"3\"]",
                String[].class);
        Boolean filterUseSiteExchangeRate = true;

        // Set callback and perform API call
        List<ComponentResponse> result = null;
        try {
            result = controller.listComponents(dateField, startDate, endDate, startDatetime, endDatetime, includeArchived, page, perPage, filterIds, filterUseSiteExchangeRate);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test headers
        Map<String, String> headers = new LinkedHashMap<String, String>();
        headers.put("Content-Type", "application/json");
        
        assertTrue("Headers do not match", TestHelper.areHeadersProperSubsetOf(
                headers, httpResponse.getResponse().getHeaders().asSimpleMap(), true));

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys",
                TestHelper.isArrayOfJsonObjectsProperSubsetOf(
                "[{\"component\":{\"id\":399850,\"name\":\"$1.00 component\",\"pricing_scheme\":\"p"
                + "er_unit\",\"unit_name\":\"Component\",\"unit_price\":\"1.0\",\"product_family_id"
                + "\":997233,\"price_per_unit_in_cents\":null,\"kind\":\"quantity_based_component"
                + "\",\"archived\":false,\"taxable\":false,\"description\":\"Component\",\"default_"
                + "price_point_id\":121000,\"prices\":[{\"id\":630687,\"component_id\":399850,\"sta"
                + "rting_quantity\":1,\"ending_quantity\":null,\"unit_price\":\"1.0\",\"price_point"
                + "_id\":121000,\"formatted_unit_price\":\"$1.00\"}],\"price_point_count\":2,\"pric"
                + "e_points_url\":\"https://general-goods.chargify.com/components/399850/price_poin"
                + "ts\",\"tax_code\":null,\"recurring\":true,\"upgrade_charge\":null,\"downgrade_cr"
                + "edit\":null,\"created_at\":\"2019-08-01T09:35:38-04:00\",\"default_price_point_n"
                + "ame\":\"Original\",\"product_family_name\":\"Chargify\",\"use_site_exchange_rate"
                + "\":true}},{\"component\":{\"id\":399853,\"name\":\"Annual Support Services\",\"p"
                + "ricing_scheme\":null,\"unit_name\":\"on/off\",\"unit_price\":\"100.0\",\"product"
                + "_family_id\":997233,\"price_per_unit_in_cents\":null,\"kind\":\"on_off_component"
                + "\",\"archived\":false,\"taxable\":true,\"description\":\"Prepay for support serv"
                + "ices\",\"default_price_point_id\":121003,\"price_point_count\":4,\"price_points_"
                + "url\":\"https://general-goods.chargify.com/components/399853/price_points\",\"ta"
                + "x_code\":\"D0000000\",\"recurring\":true,\"upgrade_charge\":null,\"downgrade_cre"
                + "dit\":null,\"created_at\":\"2019-08-01T09:35:37-04:00\",\"default_price_point_na"
                + "me\":\"Original\",\"product_family_name\":\"Chargify\",\"use_site_exchange_rate"
                + "\":true}},{\"component\":{\"id\":386937,\"name\":\"Cancellation fee\",\"pricing_"
                + "scheme\":null,\"unit_name\":\"on/off\",\"unit_price\":\"35.0\",\"product_family_"
                + "id\":997233,\"price_per_unit_in_cents\":null,\"kind\":\"on_off_component\",\"arc"
                + "hived\":false,\"taxable\":false,\"description\":\"\",\"default_price_point_id\":"
                + "108307,\"price_point_count\":1,\"price_points_url\":\"https://general-goods.char"
                + "gify.com/components/386937/price_points\",\"tax_code\":null,\"recurring\":true,"
                + "\"upgrade_charge\":null,\"downgrade_credit\":null,\"created_at\":\"2019-08-01T09"
                + ":35:38-04:00\",\"default_price_point_name\":\"Original\",\"product_family_name"
                + "\":\"Chargify\",\"use_site_exchange_rate\":true}}]",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                false, true, false));
    }

    /**
     * This method allows to retrieve a list of Components Price Points belonging to a Site.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testTestListAllComponentPricePoints() throws Exception {
        // Parameters for the API call
        BasicDateFieldEnum filterDateField = BasicDateFieldEnum.fromString(
                "updated_at");
        String filterEndDate = null;
        String filterEndDatetime = null;
        ListComponentsPricePointsIncludeEnum include = ListComponentsPricePointsIncludeEnum.fromString(
                "currency_prices");
        Integer page = 1;
        Integer perPage = 20;
        String filterStartDate = null;
        String filterStartDatetime = null;
        List<PricePointTypeEnum> filterType = ApiHelper.deserializeArray(
                "[\r\n  \"catalog\",\r\n  \"default\"\r\n]",
                PricePointTypeEnum[].class);
        ListAllComponentPricePointsDirection direction = null;
        List<Integer> filterIds = ApiHelper.deserializeArray(
                "[1,2,3]",
                Integer[].class);
        IncludeNotNullEnum filterArchivedAt = IncludeNotNullEnum.fromString(
                "not_null");

        // Set callback and perform API call
        ListComponentsPricePointsResponse result = null;
        try {
            result = controller.listAllComponentPricePoints(filterDateField, filterEndDate, filterEndDatetime, include, page, perPage, filterStartDate, filterStartDatetime, filterType, direction, filterIds, filterArchivedAt);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test headers
        Map<String, String> headers = new LinkedHashMap<String, String>();
        headers.put("Content-Type", "application/json");
        
        assertTrue("Headers do not match", TestHelper.areHeadersProperSubsetOf(
                headers, httpResponse.getResponse().getHeaders().asSimpleMap(), true));

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys", 
                TestHelper.isJsonObjectProperSubsetOf(
                "{\"price_points\":[{\"price_point\":{\"id\":1,\"name\":\"Auto-created\",\"type\":"
                + "\"default\",\"component_id\":2,\"handle\":\"auto-created\",\"created_at\":\"2021"
                + "-02-21T11:05:57-05:00\",\"updated_at\":\"2021-02-21T11:05:57-05:00\",\"prices\":"
                + "[{\"id\":3,\"component_id\":2,\"starting_quantity\":0,\"ending_quantity\":null,"
                + "\"unit_price\":\"1.0\",\"price_point_id\":1,\"formatted_unit_price\":\"$1.00\","
                + "\"segment_id\":null}]}}]}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                false, true, false));
    }

}
