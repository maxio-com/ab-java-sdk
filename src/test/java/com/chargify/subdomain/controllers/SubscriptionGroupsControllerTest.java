/*
 * MaxioAdvancedBillingFormerlyChargifyAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.chargify.subdomain.controllers;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;

import com.chargify.subdomain.ApiHelper;
import com.chargify.subdomain.MaxioAdvancedBillingFormerlyChargifyAPIClient;
import com.chargify.subdomain.exceptions.ApiException;
import com.chargify.subdomain.models.CreateSubscriptionGroupRequest;
import com.chargify.subdomain.models.ListSubscriptionGroupsResponse;
import com.chargify.subdomain.models.SubscriptionGroupResponse;
import com.chargify.subdomain.models.SubscriptionGroupSignupRequest;
import io.apimatic.core.utilities.TestHelper;
import java.util.LinkedHashMap;
import java.util.Map;
import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.Test;

public class SubscriptionGroupsControllerTest extends BaseControllerTest {

    /**
     * Client instance.
     */
    private static MaxioAdvancedBillingFormerlyChargifyAPIClient client;
    
    /**
     * Controller instance (for all tests).
     */
    private static SubscriptionGroupsController controller;

    /**
     * Setup test class.
     */
    @BeforeClass
    public static void setUpClass() {
        client = createConfiguration();
        controller = client.getSubscriptionGroupsController();
    }

    /**
     * Tear down test class.
     */
    @AfterClass
    public static void tearDownClass() {
        controller = null;
    }

    /**
     * Create multiple subscriptions at once under the same customer and consolidate them into a
     * subscription group. You must provide one and only one of the
     * `payer_id`/`payer_reference`/`payer_attributes` for the customer attached to the group. You
     * must provide one and only one of the
     * `payment_profile_id`/`credit_card_attributes`/`bank_account_attributes` for the payment
     * profile attached to the group. Only one of the `subscriptions` can have `"primary": true`
     * attribute set. When passing product to a subscription you can use either `product_id` or
     * `product_handle` or `offer_id`. You can also use `custom_price` instead.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testTestSignupWithSubscriptionGroup() throws Exception {
        // Parameters for the API call
        SubscriptionGroupSignupRequest body = ApiHelper.deserialize(
                "{\"subscription_group\":{\"payment_profile_id\":123,\"payer_id\":123,\"subscriptio"
                + "ns\":[{\"product_id\":11,\"primary\":true},{\"product_id\":12},{\"product_id\":1"
                + "3}]}}",
                SubscriptionGroupSignupRequest.class);

        // Set callback and perform API call
        try {
            controller.signupWithSubscriptionGroup(body);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 201", 
                201, httpResponse.getResponse().getStatusCode());

        // Test headers
        Map<String, String> headers = new LinkedHashMap<String, String>();
        headers.put("Content-Type", "application/json");
        
        assertTrue("Headers do not match", TestHelper.areHeadersProperSubsetOf(
                headers, httpResponse.getResponse().getHeaders().asSimpleMap(), true));

    }

    /**
     * Creates a subscription group with given members.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testTestCreateSubscriptionGroup() throws Exception {
        // Parameters for the API call
        CreateSubscriptionGroupRequest body = ApiHelper.deserialize(
                "{\"subscription_group\":{\"subscription_id\":1,\"member_ids\":[2,3,4]}}",
                CreateSubscriptionGroupRequest.class);

        // Set callback and perform API call
        SubscriptionGroupResponse result = null;
        try {
            result = controller.createSubscriptionGroup(body);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test headers
        Map<String, String> headers = new LinkedHashMap<String, String>();
        headers.put("Content-Type", "application/json");
        
        assertTrue("Headers do not match", TestHelper.areHeadersProperSubsetOf(
                headers, httpResponse.getResponse().getHeaders().asSimpleMap(), true));

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys", 
                TestHelper.isJsonObjectProperSubsetOf(
                "{\"subscription_group\":{\"customer_id\":1,\"payment_profile\":{\"id\":1,\"first_n"
                + "ame\":\"t\",\"last_name\":\"t\",\"masked_card_number\":\"XXXX-XXXX-XXXX-1\"},\"p"
                + "ayment_collection_method\":\"automatic\",\"subscription_ids\":[1,2],\"created_at"
                + "\":\"2021-01-21T05:47:38-05:00\"}}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                false, true, false));
    }

    /**
     * Returns an array of subscription groups for the site. The response is paginated and will
     * return a `meta` key with pagination information. #### Account Balance Information Account
     * balance information for the subscription groups is not returned by default. If this
     * information is desired, the `include[]=account_balances` parameter must be provided with the
     * request.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testTestListSubscriptionGroups() throws Exception {
        // Parameters for the API call
        Integer page = 1;
        Integer perPage = 20;
        String include = null;

        // Set callback and perform API call
        ListSubscriptionGroupsResponse result = null;
        try {
            result = controller.listSubscriptionGroups(page, perPage, include);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test headers
        Map<String, String> headers = new LinkedHashMap<String, String>();
        headers.put("Content-Type", "application/json");
        
        assertTrue("Headers do not match", TestHelper.areHeadersProperSubsetOf(
                headers, httpResponse.getResponse().getHeaders().asSimpleMap(), true));

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys", 
                TestHelper.isJsonObjectProperSubsetOf(
                "{\"subscription_groups\":[{\"uid\":\"grp_952mvqcnk53wq\",\"scheme\":1,\"customer_i"
                + "d\":88498000,\"payment_profile_id\":93063018,\"subscription_ids\":[42768907,8237"
                + "0782],\"primary_subscription_id\":69844395,\"next_assessment_at\":\"Sun, 09 Aug "
                + "2020 15:59:06 EDT -04:00\",\"state\":\"active\",\"cancel_at_end_of_period\":fals"
                + "e,\"account_balances\":{\"prepayments\":{\"balance_in_cents\":0},\"service_credi"
                + "ts\":{\"balance_in_cents\":0},\"pending_discounts\":{\"balance_in_cents\":0}}}],"
                + "\"meta\":{\"current_page\":1,\"total_count\":1}}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                false, true, false));
    }

}
