/*
 * MaxioAdvancedBillingFormerlyChargifyAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.chargify.subdomain.controllers;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;

import com.chargify.subdomain.ApiHelper;
import com.chargify.subdomain.MaxioAdvancedBillingFormerlyChargifyAPIClient;
import com.chargify.subdomain.exceptions.ApiException;
import com.chargify.subdomain.models.CreateOfferRequest;
import com.chargify.subdomain.models.ListOffersResponse;
import com.chargify.subdomain.models.OfferResponse;
import io.apimatic.core.utilities.TestHelper;
import java.util.LinkedHashMap;
import java.util.Map;
import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.Test;

public class OffersControllerTest extends BaseControllerTest {

    /**
     * Client instance.
     */
    private static MaxioAdvancedBillingFormerlyChargifyAPIClient client;
    
    /**
     * Controller instance (for all tests).
     */
    private static OffersController controller;

    /**
     * Setup test class.
     */
    @BeforeClass
    public static void setUpClass() {
        client = createConfiguration();
        controller = client.getOffersController();
    }

    /**
     * Tear down test class.
     */
    @AfterClass
    public static void tearDownClass() {
        controller = null;
    }

    /**
     * Create an offer within your Chargify site by sending a POST request. ## Documentation Offers
     * allow you to package complicated combinations of products, components and coupons into a
     * convenient package which can then be subscribed to just like products. Once an offer is
     * defined it can be used as an alternative to the product when creating subscriptions. Full
     * documentation on how to use offers in the Chargify UI can be located
     * [here](https://chargify.zendesk.com/hc/en-us/articles/4407753852059). ## Using a Product
     * Price Point You can optionally pass in a `product_price_point_id` that corresponds with the
     * `product_id` and the offer will use that price point. If a `product_price_point_id` is not
     * passed in, the product's default price point will be used.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testTestCreateOffer() throws Exception {
        // Parameters for the API call
        CreateOfferRequest body = ApiHelper.deserialize(
                "{\"offer\":{\"name\":\"Solo\",\"handle\":\"han_shot_first\",\"description\":\"A St"
                + "ar Wars Story\",\"product_id\":31,\"product_price_point_id\":102,\"components\":"
                + "[{\"component_id\":24,\"starting_quantity\":1}],\"coupons\":[\"DEF456\"]}}",
                CreateOfferRequest.class);

        // Set callback and perform API call
        OfferResponse result = null;
        try {
            result = controller.createOffer(body);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test headers
        Map<String, String> headers = new LinkedHashMap<String, String>();
        headers.put("Content-Type", "application/json");
        
        assertTrue("Headers do not match", TestHelper.areHeadersProperSubsetOf(
                headers, httpResponse.getResponse().getHeaders().asSimpleMap(), true));

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys", 
                TestHelper.isJsonObjectProperSubsetOf(
                "{\"offer\":{\"id\":3,\"site_id\":2,\"product_family_id\":4,\"product_family_name"
                + "\":\"Chargify\",\"product_id\":31,\"product_name\":\"30-Day Square Trial\",\"pro"
                + "duct_price_in_cents\":2000,\"product_revisable_number\":0,\"name\":\"Solo\",\"ha"
                + "ndle\":\"han_shot_first\",\"description\":\"A Star Wars Story\",\"created_at\":"
                + "\"2018-06-08T14:51:52-04:00\",\"updated_at\":\"2018-06-08T14:51:52-04:00\",\"arc"
                + "hived_at\":null,\"product_price_point_name\":\"Default\",\"offer_items\":[{\"com"
                + "ponent_id\":24,\"component_name\":\"Invoices\",\"component_unit_price\":\"3.0\","
                + "\"price_point_id\":104,\"price_point_name\":\"Original\",\"starting_quantity\":"
                + "\"1.0\",\"editable\":false}],\"offer_discounts\":[{\"coupon_id\":3,\"coupon_code"
                + "\":\"DEF456\",\"coupon_name\":\"IB Loyalty\"}]}}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                false, true, false));
    }

    /**
     * This endpoint will list offers for a site.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testTestListOffers() throws Exception {

        // Set callback and perform API call
        ListOffersResponse result = null;
        try {
            result = controller.listOffers();
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test headers
        Map<String, String> headers = new LinkedHashMap<String, String>();
        headers.put("Content-Type", "application/json");
        
        assertTrue("Headers do not match", TestHelper.areHeadersProperSubsetOf(
                headers, httpResponse.getResponse().getHeaders().asSimpleMap(), true));

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys", 
                TestHelper.isJsonObjectProperSubsetOf(
                "{\"offers\":[{\"id\":239,\"site_id\":48110,\"product_family_id\":1025627,\"product"
                + "_family_name\":\"Gold\",\"product_id\":110,\"product_name\":\"Pro\",\"product_pr"
                + "ice_in_cents\":1000,\"product_revisable_number\":0,\"product_price_point_id\":13"
                + "8,\"product_price_point_name\":\"Default\",\"name\":\"Third Offer\",\"handle\":"
                + "\"third\",\"description\":\"\",\"created_at\":\"2018-08-03T09:56:11-05:00\",\"up"
                + "dated_at\":\"2018-08-03T09:56:11-05:00\",\"archived_at\":null,\"offer_items\":[{"
                + "\"component_id\":426665,\"component_name\":\"Database Size (GB)\",\"component_un"
                + "it_price\":\"1.0\",\"price_point_id\":149438,\"price_point_name\":\"Auto-created"
                + "\",\"starting_quantity\":\"0.0\",\"editable\":false,\"currency_prices\":[]}],\"o"
                + "ffer_discounts\":[{\"coupon_id\":234,\"coupon_code\":\"GR8_CUSTOMER\",\"coupon_n"
                + "ame\":\"Multi-service Discount\"}],\"offer_signup_pages\":[{\"id\":356482,\"nick"
                + "name\":\"ggoods\",\"enabled\":true,\"return_url\":\"\",\"return_params\":\"\","
                + "\"url\":\"https://general-goods.chargifypay.com/subscribe/hjpvhnw63tzy\"}]}]}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                false, true, false));
    }

}
