/*
 * MaxioAdvancedBillingFormerlyChargifyAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.chargify.subdomain.controllers;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;

import com.chargify.subdomain.MaxioAdvancedBillingFormerlyChargifyAPIClient;
import com.chargify.subdomain.exceptions.ApiException;
import com.chargify.subdomain.models.CleanupScopeEnum;
import com.chargify.subdomain.models.ListPublicKeysResponse;
import com.chargify.subdomain.models.SiteResponse;
import io.apimatic.core.utilities.TestHelper;
import java.util.LinkedHashMap;
import java.util.Map;
import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.Test;

public class SitesControllerTest extends BaseControllerTest {

    /**
     * Client instance.
     */
    private static MaxioAdvancedBillingFormerlyChargifyAPIClient client;
    
    /**
     * Controller instance (for all tests).
     */
    private static SitesController controller;

    /**
     * Setup test class.
     */
    @BeforeClass
    public static void setUpClass() {
        client = createConfiguration();
        controller = client.getSitesController();
    }

    /**
     * Tear down test class.
     */
    @AfterClass
    public static void tearDownClass() {
        controller = null;
    }

    /**
     * This endpoint allows you to fetch some site data. Full documentation on Sites in the Chargify
     * UI can be located [here](https://chargify.zendesk.com/hc/en-us/articles/4407870738587).
     * Specifically, the [Clearing Site
     * Data](https://maxio-chargify.zendesk.com/hc/en-us/articles/5405428327309) section is
     * extremely relevant to this endpoint documentation. #### Relationship invoicing enabled If
     * site has RI enabled then you will see more settings like: "customer_hierarchy_enabled": true,
     * "whopays_enabled": true, "whopays_default_payer": "self" You can read more about these
     * settings here: [Who Pays & Customer
     * Hierarchy](https://chargify.zendesk.com/hc/en-us/articles/4407746683291).
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testTestReadSite() throws Exception {

        // Set callback and perform API call
        SiteResponse result = null;
        try {
            result = controller.readSite();
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test headers
        Map<String, String> headers = new LinkedHashMap<String, String>();
        headers.put("Content-Type", "application/json");
        
        assertTrue("Headers do not match", TestHelper.areHeadersProperSubsetOf(
                headers, httpResponse.getResponse().getHeaders().asSimpleMap(), true));

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys", 
                TestHelper.isJsonObjectProperSubsetOf(
                "{\"site\":{\"id\":0,\"name\":\"string\",\"subdomain\":\"string\",\"currency\":\"st"
                + "ring\",\"seller_id\":0,\"non_primary_currencies\":[\"string\"],\"relationship_in"
                + "voicing_enabled\":true,\"customer_hierarchy_enabled\":true,\"whopays_enabled\":t"
                + "rue,\"whopays_default_payer\":\"string\",\"default_payment_collection_method\":"
                + "\"string\",\"organization_address\":{\"street\":null,\"line2\":null,\"city\":nul"
                + "l,\"state\":null,\"zip\":null,\"country\":null,\"name\":\"string\",\"phone\":\"s"
                + "tring\"},\"tax_configuration\":{\"kind\":\"custom\",\"fully_configured\":true,"
                + "\"destination_address\":\"shipping_then_billing\"},\"net_terms\":{\"default_net_"
                + "terms\":0,\"automatic_net_terms\":0,\"remittance_net_terms\":0,\"net_terms_on_re"
                + "mittance_signups_enabled\":false,\"custom_net_terms_enabled\":false},\"test\":tr"
                + "ue}}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                false, true, false));
    }

    /**
     * This call is asynchronous and there may be a delay before the site data is fully deleted. If
     * you are clearing site data for an automated test, you will need to build in a delay and/or
     * check that there are no products, etc., in the site before proceeding. **This functionality
     * will only work on sites in TEST mode. Attempts to perform this on sites in “live” mode will
     * result in a response of 403 FORBIDDEN.** .
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testTestClearSite() throws Exception {
        // Parameters for the API call
        CleanupScopeEnum cleanupScope = CleanupScopeEnum.fromString(
                "all");

        // Set callback and perform API call
        try {
            controller.clearSite(cleanupScope);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

    }

    /**
     * This endpoint returns public keys used for Chargify.js.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testTestListChargifyJsPublicKeys() throws Exception {
        // Parameters for the API call
        Integer page = 1;
        Integer perPage = 20;

        // Set callback and perform API call
        ListPublicKeysResponse result = null;
        try {
            result = controller.listChargifyJsPublicKeys(page, perPage);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test headers
        Map<String, String> headers = new LinkedHashMap<String, String>();
        headers.put("Content-Type", "application/json");
        
        assertTrue("Headers do not match", TestHelper.areHeadersProperSubsetOf(
                headers, httpResponse.getResponse().getHeaders().asSimpleMap(), true));

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys", 
                TestHelper.isJsonObjectProperSubsetOf(
                "{\"chargify_js_keys\":[{\"public_key\":\"chjs_ftrxt7c4fv6f74wchjs_5zyn7gnwv\",\"re"
                + "quires_security_token\":false,\"created_at\":\"2021-01-01T05:00:00-04:00\"}],\"m"
                + "eta\":{\"total_count\":1,\"current_page\":1,\"total_pages\":1,\"per_page\":10}}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                false, true, false));
    }

}
