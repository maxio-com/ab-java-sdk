/*
 * MaxioAdvancedBillingFormerlyChargifyAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.chargify.subdomain.controllers;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;

import com.chargify.subdomain.ApiHelper;
import com.chargify.subdomain.MaxioAdvancedBillingFormerlyChargifyAPIClient;
import com.chargify.subdomain.exceptions.ApiException;
import com.chargify.subdomain.models.CreateSubscriptionRequest;
import io.apimatic.core.utilities.TestHelper;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.Test;

public class ProformaInvoicesControllerTest extends BaseControllerTest {

    /**
     * Client instance.
     */
    private static MaxioAdvancedBillingFormerlyChargifyAPIClient client;
    
    /**
     * Controller instance (for all tests).
     */
    private static ProformaInvoicesController controller;

    /**
     * Setup test class.
     */
    @BeforeClass
    public static void setUpClass() {
        client = createConfiguration();
        controller = client.getProformaInvoicesController();
    }

    /**
     * Tear down test class.
     */
    @AfterClass
    public static void tearDownClass() {
        controller = null;
    }

    /**
     * This endpoint is only available for Relationship Invoicing sites. It cannot be used to create
     * consolidated proforma invoices or preview prepaid subscriptions. Create a proforma invoice to
     * preview costs before a subscription's signup. Like other proforma invoices, it can be emailed
     * to the customer, voided, and publicly viewed on the chargifypay domain. Pass a payload that
     * resembles a subscription create or signup preview request. For example, you can specify
     * components, coupons/a referral, offers, custom pricing, and an existing customer or payment
     * profile to populate a shipping or billing address. A product and customer first name, last
     * name, and email are the minimum requirements. We recommend associating the proforma invoice
     * with a customer_id to easily find their proforma invoices, since the subscription_id will
     * always be blank.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testTestCreateSignupProformaInvoice() throws Exception {
        // Parameters for the API call
        CreateSubscriptionRequest body = ApiHelper.deserialize(
                "{\"subscription\":{\"product_handle\":\"gold-product\",\"customer_attributes\":{"
                + "\"first_name\":\"Myra\",\"last_name\":\"Maisel\",\"email\":\"mmaisel@example.com"
                + "\"}}}",
                CreateSubscriptionRequest.class);

        // Set callback and perform API call
        try {
            controller.createSignupProformaInvoice(body);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 201", 
                201, httpResponse.getResponse().getStatusCode());

        // Test headers
        Map<String, String> headers = new LinkedHashMap<String, String>();
        headers.put("Content-Type", "application/json");
        
        assertTrue("Headers do not match", TestHelper.areHeadersProperSubsetOf(
                headers, httpResponse.getResponse().getHeaders().asSimpleMap(), true));

    }

    /**
     * This endpoint is only available for Relationship Invoicing sites. It cannot be used to create
     * consolidated proforma invoice previews or preview prepaid subscriptions. Create a signup
     * preview in the format of a proforma invoice to preview costs before a subscription's signup.
     * You have the option of optionally previewing the first renewal's costs as well. The proforma
     * invoice preview will not be persisted. Pass a payload that resembles a subscription create or
     * signup preview request. For example, you can specify components, coupons/a referral, offers,
     * custom pricing, and an existing customer or payment profile to populate a shipping or billing
     * address. A product and customer first name, last name, and email are the minimum
     * requirements.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testTestPreviewSignupProformaInvoice() throws Exception {
        // Parameters for the API call
        String includeNextProformaInvoice = null;
        CreateSubscriptionRequest body = ApiHelper.deserialize(
                "{\"subscription\":{\"product_handle\":\"gold-plan\",\"customer_attributes\":{\"fir"
                + "st_name\":\"first\",\"last_name\":\"last\",\"email\":\"flast@example.com\"}}}",
                CreateSubscriptionRequest.class);

        // Set callback and perform API call
        try {
            controller.previewSignupProformaInvoice(includeNextProformaInvoice, body);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 201", 
                201, httpResponse.getResponse().getStatusCode());

        // Test headers
        Map<String, String> headers = new LinkedHashMap<String, String>();
        headers.put("Content-Type", "application/json");
        
        assertTrue("Headers do not match", TestHelper.areHeadersProperSubsetOf(
                headers, httpResponse.getResponse().getHeaders().asSimpleMap(), true));

    }

}
