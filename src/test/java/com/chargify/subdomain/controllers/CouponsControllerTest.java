/*
 * MaxioAdvancedBillingFormerlyChargifyAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.chargify.subdomain.controllers;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;

import com.chargify.subdomain.ApiHelper;
import com.chargify.subdomain.MaxioAdvancedBillingFormerlyChargifyAPIClient;
import com.chargify.subdomain.exceptions.ApiException;
import com.chargify.subdomain.models.BasicDateFieldEnum;
import com.chargify.subdomain.models.CouponResponse;
import io.apimatic.core.utilities.TestHelper;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.Test;

public class CouponsControllerTest extends BaseControllerTest {

    /**
     * Client instance.
     */
    private static MaxioAdvancedBillingFormerlyChargifyAPIClient client;
    
    /**
     * Controller instance (for all tests).
     */
    private static CouponsController controller;

    /**
     * Setup test class.
     */
    @BeforeClass
    public static void setUpClass() {
        client = createConfiguration();
        controller = client.getCouponsController();
    }

    /**
     * Tear down test class.
     */
    @AfterClass
    public static void tearDownClass() {
        controller = null;
    }

    /**
     * You can search for a coupon via the API with the find method. By passing a code parameter,
     * the find will attempt to locate a coupon that matches that code. If no coupon is found, a 404
     * is returned. If you have more than one product family and if the coupon you are trying to
     * find does not belong to the default product family in your site, then you will need to
     * specify (either in the url or as a query string param) the product family id.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testTestReadCouponByCode() throws Exception {
        // Parameters for the API call
        Integer productFamilyId = null;
        String code = null;

        // Set callback and perform API call
        try {
            controller.readCouponByCode(productFamilyId, code);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test headers
        Map<String, String> headers = new LinkedHashMap<String, String>();
        headers.put("Content-Type", "application/json");
        
        assertTrue("Headers do not match", TestHelper.areHeadersProperSubsetOf(
                headers, httpResponse.getResponse().getHeaders().asSimpleMap(), true));

    }

    /**
     * You can retrieve a list of coupons. If the coupon is set to `use_site_exchange_rate: true`,
     * it will return pricing based on the current exchange rate. If the flag is set to false, it
     * will return all of the defined prices for each currency.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testTestListCoupons() throws Exception {
        // Parameters for the API call
        Integer page = 1;
        Integer perPage = 30;
        BasicDateFieldEnum dateField = BasicDateFieldEnum.fromString(
                "updated_at");
        String startDate = null;
        String endDate = null;
        String startDatetime = null;
        String endDatetime = null;
        List<Integer> filterIds = ApiHelper.deserializeArray(
                "[1,2,3]",
                Integer[].class);
        List<String> filterCodes = ApiHelper.deserializeArray(
                "[\"free\",\"free_trial\"]",
                String[].class);
        Boolean currencyPrices = true;
        String filterEndDate = null;
        String filterEndDatetime = null;
        String filterStartDate = null;
        String filterStartDatetime = null;
        BasicDateFieldEnum filterDateField = BasicDateFieldEnum.fromString(
                "updated_at");
        Boolean filterUseSiteExchangeRate = true;

        // Set callback and perform API call
        List<CouponResponse> result = null;
        try {
            result = controller.listCoupons(page, perPage, dateField, startDate, endDate, startDatetime, endDatetime, filterIds, filterCodes, currencyPrices, filterEndDate, filterEndDatetime, filterStartDate, filterStartDatetime, filterDateField, filterUseSiteExchangeRate);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test headers
        Map<String, String> headers = new LinkedHashMap<String, String>();
        headers.put("Content-Type", "application/json");
        
        assertTrue("Headers do not match", TestHelper.areHeadersProperSubsetOf(
                headers, httpResponse.getResponse().getHeaders().asSimpleMap(), true));

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys",
                TestHelper.isArrayOfJsonObjectsProperSubsetOf(
                "[{\"coupon\":{\"id\":0,\"name\":\"string\",\"code\":\"string\",\"description\":\"s"
                + "tring\",\"amount\":0,\"amount_in_cents\":0,\"product_family_id\":0,\"product_fam"
                + "ily_name\":\"string\",\"start_date\":\"string\",\"end_date\":\"string\",\"percen"
                + "tage\":0,\"recurring\":true,\"recurring_scheme\":\"do_not_recur\",\"duration_per"
                + "iod_count\":0,\"duration_interval\":0,\"duration_interval_unit\":\"string\",\"du"
                + "ration_interval_span\":\"string\",\"allow_negative_balance\":true,\"archived_at"
                + "\":\"string\",\"conversion_limit\":\"string\",\"stackable\":true,\"compounding_s"
                + "trategy\":\"compound\",\"use_site_exchange_rate\":true,\"created_at\":\"string"
                + "\",\"updated_at\":\"string\",\"discount_type\":\"amount\",\"exclude_mid_period_a"
                + "llocations\":true,\"apply_on_cancel_at_end_of_period \":true,\"coupon_restrictio"
                + "ns\":[{\"id\":\"string\",\"item_type\":\"Component\",\"item_id\":0,\"name\":\"st"
                + "ring\",\"handle\":\"string\"}]}}]",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                false, true, false));
    }

}
