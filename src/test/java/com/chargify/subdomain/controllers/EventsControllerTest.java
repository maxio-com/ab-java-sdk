/*
 * MaxioAdvancedBillingFormerlyChargifyAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.chargify.subdomain.controllers;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;

import com.chargify.subdomain.ApiHelper;
import com.chargify.subdomain.MaxioAdvancedBillingFormerlyChargifyAPIClient;
import com.chargify.subdomain.exceptions.ApiException;
import com.chargify.subdomain.models.Count;
import com.chargify.subdomain.models.DirectionEnum;
import com.chargify.subdomain.models.EventResponse;
import com.chargify.subdomain.models.EventTypeEnum;
import com.chargify.subdomain.models.ListEventsDateFieldEnum;
import io.apimatic.core.utilities.TestHelper;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.Test;

public class EventsControllerTest extends BaseControllerTest {

    /**
     * Client instance.
     */
    private static MaxioAdvancedBillingFormerlyChargifyAPIClient client;
    
    /**
     * Controller instance (for all tests).
     */
    private static EventsController controller;

    /**
     * Setup test class.
     */
    @BeforeClass
    public static void setUpClass() {
        client = createConfiguration();
        controller = client.getEventsController();
    }

    /**
     * Tear down test class.
     */
    @AfterClass
    public static void tearDownClass() {
        controller = null;
    }

    /**
     * ## Events Intro Chargify Events include various activity that happens around a Site. This
     * information is **especially** useful to track down issues that arise when subscriptions are
     * not created due to errors. Within the Chargify UI, "Events" are referred to as "Site
     * Activity". Full documentation on how to record view Events / Site Activty in the Chargify UI
     * can be located [here](https://chargify.zendesk.com/hc/en-us/articles/4407864698139). ## List
     * Events for a Site This method will retrieve a list of events for a site. Use query string
     * filters to narrow down results. You may use the `key` filter as part of your query string to
     * narrow down results. ### Legacy Filters The following keys are no longer supported. +
     * `payment_failure_recreated` + `payment_success_recreated` + `renewal_failure_recreated` +
     * `renewal_success_recreated` + `zferral_revenue_post_failure` - (Specific to the deprecated
     * Zferral integration) + `zferral_revenue_post_success` - (Specific to the deprecated Zferral
     * integration) ## Event Specific Data Event Specific Data Each event type has its own
     * `event_specific_data` specified. Here’s an example event for the
     * `subscription_product_change` event: ``` { "event": { "id": 351, "key":
     * "subscription_product_change", "message": "Product changed on Marky Mark's subscription from
     * 'Basic' to 'Pro'", "subscription_id": 205, "event_specific_data": { "new_product_id": 3,
     * "previous_product_id": 2 }, "created_at": "2012-01-30T10:43:31-05:00" } } ``` Here’s an
     * example event for the `subscription_state_change` event: ``` { "event": { "id": 353, "key":
     * "subscription_state_change", "message": "State changed on Marky Mark's subscription to Pro
     * from trialing to active", "subscription_id": 205, "event_specific_data": {
     * "new_subscription_state": "active", "previous_subscription_state": "trialing" },
     * "created_at": "2012-01-30T10:43:33-05:00" } } ```.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testTestListEvents() throws Exception {
        // Parameters for the API call
        Integer page = 1;
        Integer perPage = 20;
        Integer sinceId = null;
        Integer maxId = null;
        DirectionEnum direction = DirectionEnum.fromString(
                "desc");
        List<EventTypeEnum> filter = ApiHelper.deserializeArray(
                "[\"custom_field_value_change\",\"payment_success\"]",
                EventTypeEnum[].class);
        ListEventsDateFieldEnum dateField = ListEventsDateFieldEnum.fromString(
                "created_at");
        String startDate = null;
        String endDate = null;
        String startDatetime = null;
        String endDatetime = null;

        // Set callback and perform API call
        List<EventResponse> result = null;
        try {
            result = controller.listEvents(page, perPage, sinceId, maxId, direction, filter, dateField, startDate, endDate, startDatetime, endDatetime);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test headers
        Map<String, String> headers = new LinkedHashMap<String, String>();
        headers.put("Content-Type", "application/json");
        
        assertTrue("Headers do not match", TestHelper.areHeadersProperSubsetOf(
                headers, httpResponse.getResponse().getHeaders().asSimpleMap(), true));

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys",
                TestHelper.isArrayOfJsonObjectsProperSubsetOf(
                "[{\"event\":{\"id\":343087780,\"key\":\"subscription_state_change\",\"message\":"
                + "\"State changed on Test subscription to Monthly Product from active to past_due"
                + "\",\"subscription_id\":14950962,\"created_at\":\"2016-10-27T16:42:22-04:00\",\"e"
                + "vent_specific_data\":{\"previous_subscription_state\":\"active\",\"new_subscript"
                + "ion_state\":\"past_due\"}}},{\"event\":{\"id\":343087742,\"key\":\"billing_date_"
                + "change\",\"message\":\"Billing date changed on Test's subscription to Monthly Pr"
                + "oduct from 11/27/2016 to 10/27/2016\",\"subscription_id\":14950962,\"created_at"
                + "\":\"2016-10-27T16:42:19-04:00\",\"event_specific_data\":null}},{\"event\":{\"id"
                + "\":343085267,\"key\":\"statement_closed\",\"message\":\"Statement 79401838 close"
                + "d (but not settled) for Test's subscription to ANNUAL product\",\"subscription_i"
                + "d\":14950975,\"created_at\":\"2016-10-27T16:40:40-04:00\",\"event_specific_data"
                + "\":null}},{\"event\":{\"id\":4481,\"key\":\"custom_field_value_change\",\"messag"
                + "e\":\"Custom field (Extra support included) changed for Subscription 117 from 'Y"
                + "es' to 'No'.\",\"subscription_id\":117,\"customer_id\":null,\"created_at\":\"202"
                + "2-03-24T07:55:06-04:00\",\"event_specific_data\":{\"event_type\":\"updated\",\"m"
                + "etafield_name\":\"Extra support included\",\"metafield_id\":2,\"old_value\":\"Ye"
                + "s\",\"new_value\":\"No\",\"resource_type\":\"Subscription\",\"resource_id\":117,"
                + "\"previous_subscription_state\":\"active\",\"new_subscription_state\":\"past_due"
                + "\"}}}]",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                false, true, false));
    }

    /**
     * ## Events Intro Chargify Events include various activity that happens around a Site. This
     * information is **especially** useful to track down issues that arise when subscriptions are
     * not created due to errors. Within the Chargify UI, "Events" are referred to as "Site
     * Activity". Full documentation on how to record view Events / Site Activty in the Chargify UI
     * can be located [here](https://chargify.zendesk.com/hc/en-us/articles/4407864698139). ## List
     * Events for a Site This method will retrieve a list of events for a site. Use query string
     * filters to narrow down results. You may use the `key` filter as part of your query string to
     * narrow down results. ### Legacy Filters The following keys are no longer supported. +
     * `payment_failure_recreated` + `payment_success_recreated` + `renewal_failure_recreated` +
     * `renewal_success_recreated` + `zferral_revenue_post_failure` - (Specific to the deprecated
     * Zferral integration) + `zferral_revenue_post_success` - (Specific to the deprecated Zferral
     * integration) ## Event Specific Data Event Specific Data Each event type has its own
     * `event_specific_data` specified. Here’s an example event for the
     * `subscription_product_change` event: ``` { "event": { "id": 351, "key":
     * "subscription_product_change", "message": "Product changed on Marky Mark's subscription from
     * 'Basic' to 'Pro'", "subscription_id": 205, "event_specific_data": { "new_product_id": 3,
     * "previous_product_id": 2 }, "created_at": "2012-01-30T10:43:31-05:00" } } ``` Here’s an
     * example event for the `subscription_state_change` event: ``` { "event": { "id": 353, "key":
     * "subscription_state_change", "message": "State changed on Marky Mark's subscription to Pro
     * from trialing to active", "subscription_id": 205, "event_specific_data": {
     * "new_subscription_state": "active", "previous_subscription_state": "trialing" },
     * "created_at": "2012-01-30T10:43:33-05:00" } } ```.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testTestListEvents1() throws Exception {
        // Parameters for the API call
        Integer page = 1;
        Integer perPage = 20;
        Integer sinceId = null;
        Integer maxId = null;
        DirectionEnum direction = DirectionEnum.fromString(
                "desc");
        List<EventTypeEnum> filter = ApiHelper.deserializeArray(
                "[\"custom_field_value_change\",\"payment_success\"]",
                EventTypeEnum[].class);
        ListEventsDateFieldEnum dateField = ListEventsDateFieldEnum.fromString(
                "created_at");
        String startDate = null;
        String endDate = null;
        String startDatetime = null;
        String endDatetime = null;

        // Set callback and perform API call
        try {
            controller.listEvents(page, perPage, sinceId, maxId, direction, filter, dateField, startDate, endDate, startDatetime, endDatetime);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test headers
        Map<String, String> headers = new LinkedHashMap<String, String>();
        headers.put("Content-Type", "application/xml");
        
        assertTrue("Headers do not match", TestHelper.areHeadersProperSubsetOf(
                headers, httpResponse.getResponse().getHeaders().asSimpleMap(), true));

    }

    /**
     * ## Events Intro Chargify Events include various activity that happens around a Site. This
     * information is **especially** useful to track down issues that arise when subscriptions are
     * not created due to errors. Within the Chargify UI, "Events" are referred to as "Site
     * Activity". Full documentation on how to record view Events / Site Activty in the Chargify UI
     * can be located [here](https://chargify.zendesk.com/hc/en-us/articles/4407864698139). ## List
     * Events for a Site This method will retrieve a list of events for a site. Use query string
     * filters to narrow down results. You may use the `key` filter as part of your query string to
     * narrow down results. ### Legacy Filters The following keys are no longer supported. +
     * `payment_failure_recreated` + `payment_success_recreated` + `renewal_failure_recreated` +
     * `renewal_success_recreated` + `zferral_revenue_post_failure` - (Specific to the deprecated
     * Zferral integration) + `zferral_revenue_post_success` - (Specific to the deprecated Zferral
     * integration) ## Event Specific Data Event Specific Data Each event type has its own
     * `event_specific_data` specified. Here’s an example event for the
     * `subscription_product_change` event: ``` { "event": { "id": 351, "key":
     * "subscription_product_change", "message": "Product changed on Marky Mark's subscription from
     * 'Basic' to 'Pro'", "subscription_id": 205, "event_specific_data": { "new_product_id": 3,
     * "previous_product_id": 2 }, "created_at": "2012-01-30T10:43:31-05:00" } } ``` Here’s an
     * example event for the `subscription_state_change` event: ``` { "event": { "id": 353, "key":
     * "subscription_state_change", "message": "State changed on Marky Mark's subscription to Pro
     * from trialing to active", "subscription_id": 205, "event_specific_data": {
     * "new_subscription_state": "active", "previous_subscription_state": "trialing" },
     * "created_at": "2012-01-30T10:43:33-05:00" } } ```.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testTestListEvents2() throws Exception {
        // Parameters for the API call
        Integer page = 1;
        Integer perPage = 20;
        Integer sinceId = null;
        Integer maxId = null;
        DirectionEnum direction = DirectionEnum.fromString(
                "desc");
        List<EventTypeEnum> filter = ApiHelper.deserializeArray(
                "[\"custom_field_value_change\",\"payment_success\"]",
                EventTypeEnum[].class);
        ListEventsDateFieldEnum dateField = ListEventsDateFieldEnum.fromString(
                "created_at");
        String startDate = null;
        String endDate = null;
        String startDatetime = null;
        String endDatetime = null;

        // Set callback and perform API call
        try {
            controller.listEvents(page, perPage, sinceId, maxId, direction, filter, dateField, startDate, endDate, startDatetime, endDatetime);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test headers
        Map<String, String> headers = new LinkedHashMap<String, String>();
        headers.put("Content-Type", "multipart/form-data");
        
        assertTrue("Headers do not match", TestHelper.areHeadersProperSubsetOf(
                headers, httpResponse.getResponse().getHeaders().asSimpleMap(), true));

    }

    /**
     * Get a count of all the events for a given site by using this method.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testTestReadEventsCount() throws Exception {
        // Parameters for the API call
        Integer page = 1;
        Integer perPage = 20;
        Integer sinceId = null;
        Integer maxId = null;
        DirectionEnum direction = DirectionEnum.fromString(
                "desc");
        List<EventTypeEnum> filter = ApiHelper.deserializeArray(
                "[\"custom_field_value_change\",\"payment_success\"]",
                EventTypeEnum[].class);

        // Set callback and perform API call
        Count result = null;
        try {
            result = controller.readEventsCount(page, perPage, sinceId, maxId, direction, filter);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test headers
        Map<String, String> headers = new LinkedHashMap<String, String>();
        headers.put("Content-Type", "application/json");
        
        assertTrue("Headers do not match", TestHelper.areHeadersProperSubsetOf(
                headers, httpResponse.getResponse().getHeaders().asSimpleMap(), true));

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys", 
                TestHelper.isJsonObjectProperSubsetOf(
                "{\"count\":144}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                false, true, false));
    }

}
