/*
 * MaxioAdvancedBillingFormerlyChargifyAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.chargify.subdomain.controllers;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;

import com.chargify.subdomain.ApiHelper;
import com.chargify.subdomain.MaxioAdvancedBillingFormerlyChargifyAPIClient;
import com.chargify.subdomain.exceptions.ApiException;
import com.chargify.subdomain.models.BasicDateFieldEnum;
import com.chargify.subdomain.models.IncludeNotNullEnum;
import com.chargify.subdomain.models.ListProductsIncludeEnum;
import com.chargify.subdomain.models.ProductResponse;
import io.apimatic.core.utilities.TestHelper;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.Test;

public class ProductsControllerTest extends BaseControllerTest {

    /**
     * Client instance.
     */
    private static MaxioAdvancedBillingFormerlyChargifyAPIClient client;
    
    /**
     * Controller instance (for all tests).
     */
    private static ProductsController controller;

    /**
     * Setup test class.
     */
    @BeforeClass
    public static void setUpClass() {
        client = createConfiguration();
        controller = client.getProductsController();
    }

    /**
     * Tear down test class.
     */
    @AfterClass
    public static void tearDownClass() {
        controller = null;
    }

    /**
     * This method allows to retrieve a list of Products belonging to a Site.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testTestListProducts() throws Exception {
        // Parameters for the API call
        BasicDateFieldEnum dateField = BasicDateFieldEnum.fromString(
                "updated_at");
        String endDate = null;
        String endDatetime = null;
        String startDate = null;
        String startDatetime = null;
        Integer page = 1;
        Integer perPage = 20;
        Boolean includeArchived = true;
        ListProductsIncludeEnum include = ListProductsIncludeEnum.fromString(
                "prepaid_product_price_point");
        IncludeNotNullEnum filterPrepaidProductPricePointProductPricePointId = IncludeNotNullEnum.fromString(
                "not_null");
        Boolean filterUseSiteExchangeRate = true;

        // Set callback and perform API call
        List<ProductResponse> result = null;
        try {
            result = controller.listProducts(dateField, endDate, endDatetime, startDate, startDatetime, page, perPage, includeArchived, include, filterPrepaidProductPricePointProductPricePointId, filterUseSiteExchangeRate);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test headers
        Map<String, String> headers = new LinkedHashMap<String, String>();
        headers.put("Content-Type", "application/json");
        
        assertTrue("Headers do not match", TestHelper.areHeadersProperSubsetOf(
                headers, httpResponse.getResponse().getHeaders().asSimpleMap(), true));

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys",
                TestHelper.isArrayOfJsonObjectsProperSubsetOf(
                "[{\"product\":{\"id\":0,\"name\":\"string\",\"handle\":\"string\",\"description\":"
                + "\"string\",\"accounting_code\":\"string\",\"request_credit_card\":true,\"expirat"
                + "ion_interval\":0,\"expiration_interval_unit\":\"month\",\"created_at\":\"string"
                + "\",\"updated_at\":\"string\",\"price_in_cents\":0,\"interval\":0,\"interval_unit"
                + "\":\"month\",\"initial_charge_in_cents\":0,\"trial_price_in_cents\":0,\"trial_in"
                + "terval\":0,\"trial_interval_unit\":\"month\",\"archived_at\":\"string\",\"requir"
                + "e_credit_card\":true,\"return_params\":\"string\",\"taxable\":true,\"update_retu"
                + "rn_url\":\"string\",\"initial_charge_after_trial\":true,\"version_number\":0,\"u"
                + "pdate_return_params\":\"string\",\"product_family\":{\"id\":0,\"name\":\"string"
                + "\",\"handle\":\"string\",\"accounting_code\":null,\"description\":\"string\",\"c"
                + "reated_at\":\"string\",\"updated_at\":\"string\"},\"public_signup_pages\":[{\"id"
                + "\":0,\"return_url\":\"string\",\"return_params\":\"string\",\"url\":\"string\"}]"
                + ",\"product_price_point_name\":\"string\",\"request_billing_address\":true,\"requ"
                + "ire_billing_address\":true,\"require_shipping_address\":true,\"use_site_exchange"
                + "_rate\":true,\"tax_code\":\"string\",\"default_product_price_point_id\":0}}]",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                false, true, false));
    }

}
