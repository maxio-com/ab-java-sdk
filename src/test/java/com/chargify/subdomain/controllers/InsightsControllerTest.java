/*
 * MaxioAdvancedBillingFormerlyChargifyAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.chargify.subdomain.controllers;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;

import com.chargify.subdomain.ApiHelper;
import com.chargify.subdomain.DateTimeHelper;
import com.chargify.subdomain.MaxioAdvancedBillingFormerlyChargifyAPIClient;
import com.chargify.subdomain.exceptions.ApiException;
import com.chargify.subdomain.models.DirectionEnum;
import com.chargify.subdomain.models.ListMRRResponse;
import com.chargify.subdomain.models.MRRResponse;
import com.chargify.subdomain.models.SiteSummary;
import com.chargify.subdomain.models.containers.ReadMrrMovementsDirection;
import io.apimatic.core.utilities.TestHelper;
import java.time.LocalDateTime;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.Test;

public class InsightsControllerTest extends BaseControllerTest {

    /**
     * Client instance.
     */
    private static MaxioAdvancedBillingFormerlyChargifyAPIClient client;
    
    /**
     * Controller instance (for all tests).
     */
    private static InsightsController controller;

    /**
     * Setup test class.
     */
    @BeforeClass
    public static void setUpClass() {
        client = createConfiguration();
        controller = client.getInsightsController();
    }

    /**
     * Tear down test class.
     */
    @AfterClass
    public static void tearDownClass() {
        controller = null;
    }

    /**
     * The Stats API is a very basic view of some Site-level stats. This API call only answers with
     * JSON responses. An XML version is not provided. ## Stats Documentation There currently is not
     * a complimentary matching set of documentation that compliments this endpoint. However, each
     * Site's dashboard will reflect the summary of information provided in the Stats reposnse. ```
     * https://subdomain.chargify.com/dashboard ```.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testTestReadSiteStats() throws Exception {

        // Set callback and perform API call
        SiteSummary result = null;
        try {
            result = controller.readSiteStats();
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test headers
        Map<String, String> headers = new LinkedHashMap<String, String>();
        headers.put("Content-Type", "application/json");
        
        assertTrue("Headers do not match", TestHelper.areHeadersProperSubsetOf(
                headers, httpResponse.getResponse().getHeaders().asSimpleMap(), true));

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys", 
                TestHelper.isJsonObjectProperSubsetOf(
                "{\"seller_name\":\"Acme, Inc.\",\"site_name\":\"Production\",\"site_id\":12345,\"s"
                + "ite_currency\":\"USD\",\"stats\":{\"total_subscriptions\":120,\"subscriptions_to"
                + "day\":4,\"total_revenue\":\"$45,978.81\",\"revenue_today\":\"$1,405.12\",\"reven"
                + "ue_this_month\":\"$10,000.00\",\"revenue_this_year\":\"$27,935.24\"}}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                false, true, false));
    }

    /**
     * This endpoint returns your site's current MRR, including plan and usage breakouts.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testTestReadMrr() throws Exception {
        // Parameters for the API call
        LocalDateTime atTime = null;
        Integer subscriptionId = null;

        // Set callback and perform API call
        MRRResponse result = null;
        try {
            result = controller.readMrr(atTime, subscriptionId);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test headers
        Map<String, String> headers = new LinkedHashMap<String, String>();
        headers.put("Content-Type", "application/json");
        
        assertTrue("Headers do not match", TestHelper.areHeadersProperSubsetOf(
                headers, httpResponse.getResponse().getHeaders().asSimpleMap(), true));

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys", 
                TestHelper.isJsonObjectProperSubsetOf(
                "{\"mrr\":{\"amount_in_cents\":9915593,\"amount_formatted\":\"$99,155.93\",\"curren"
                + "cy\":\"USD\",\"currency_symbol\":\"$\",\"at_time\":\"2021-02-03T14:23:17-05:00"
                + "\",\"breakouts\":{\"plan_amount_in_cents\":9913593,\"plan_amount_formatted\":\"$"
                + "99,135.93\",\"usage_amount_in_cents\":2000,\"usage_amount_formatted\":\"$20.00"
                + "\"}}}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                false, true, false));
    }

    /**
     * This endpoint returns your site's MRR movements. ## Understanding MRR movements This endpoint
     * will aid in accessing your site's [MRR
     * Report](https://chargify.zendesk.com/hc/en-us/articles/4407838249627) data. Whenever a
     * subscription event occurs that causes your site's MRR to change (such as a signup or
     * upgrade), we record an MRR movement. These records are accessible via the MRR Movements
     * endpoint. Each MRR Movement belongs to a subscription and contains a timestamp, category, and
     * an amount. `line_items` represent the subscription's product configuration at the time of the
     * movement. ### Plan & Usage Breakouts In the MRR Report UI, we support a setting to [include
     * or
     * exclude](https://chargify.zendesk.com/hc/en-us/articles/4407838249627#displaying-component-based-metered-usage-in-mrr)
     * usage revenue. In the MRR APIs, responses include `plan` and `usage` breakouts. Plan includes
     * revenue from: * Products * Quantity-Based Components * On/Off Components Usage includes
     * revenue from: * Metered Components * Prepaid Usage Components.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testTestReadMrrMovements() throws Exception {
        // Parameters for the API call
        Integer subscriptionId = null;
        Integer page = 1;
        Integer perPage = 10;
        ReadMrrMovementsDirection direction = null;

        // Set callback and perform API call
        ListMRRResponse result = null;
        try {
            result = controller.readMrrMovements(subscriptionId, page, perPage, direction);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test headers
        Map<String, String> headers = new LinkedHashMap<String, String>();
        headers.put("Content-Type", "application/json");
        
        assertTrue("Headers do not match", TestHelper.areHeadersProperSubsetOf(
                headers, httpResponse.getResponse().getHeaders().asSimpleMap(), true));

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys", 
                TestHelper.isJsonObjectProperSubsetOf(
                "{\"mrr\":{\"page\":0,\"per_page\":10,\"total_pages\":80,\"total_entries\":791,\"cu"
                + "rrency\":\"USD\",\"currency_symbol\":\"$\",\"movements\":[{\"timestamp\":\"2014-"
                + "12-03T13:59:46-05:00\",\"amount_in_cents\":2173,\"amount_formatted\":\"$21.73\","
                + "\"description\":\"Awesome Company signed up for Super Product ($21.73/mo)\",\"ca"
                + "tegory\":\"new_business\",\"breakouts\":{\"plan_amount_in_cents\":2173,\"plan_am"
                + "ount_formatted\":\"$21.73\",\"usage_amount_in_cents\":0,\"usage_amount_formatted"
                + "\":\"$0.00\"},\"line_items\":[{\"product_id\":306386,\"component_id\":0,\"price_"
                + "point_id\":3856987,\"name\":\"string\",\"mrr\":2173,\"mrr_movements\":[{\"amount"
                + "\":2173,\"category\":\"new_business\"}],\"quantity\":1,\"prev_quantity\":0,\"rec"
                + "urring\":true}],\"subscription_id\":12355,\"subscriber_name\":\"Amy Smith\"}]}}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                false, true, false));
    }

    /**
     * This endpoint returns your site's current MRR, including plan and usage breakouts split per
     * subscription.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testTestListMrrPerSubscription() throws Exception {
        // Parameters for the API call
        List<Integer> filterSubscriptionIds = ApiHelper.deserializeArray(
                "[1,2,3]",
                Integer[].class);
        String atTime = 
                "at_time=2022-01-10T10:00:00-05:00";
        Integer page = 1;
        Integer perPage = 20;
        DirectionEnum direction = DirectionEnum.fromString(
                "desc");

        // Set callback and perform API call
        try {
            controller.listMrrPerSubscription(filterSubscriptionIds, atTime, page, perPage, direction);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test headers
        Map<String, String> headers = new LinkedHashMap<String, String>();
        headers.put("Content-Type", "application/json");
        
        assertTrue("Headers do not match", TestHelper.areHeadersProperSubsetOf(
                headers, httpResponse.getResponse().getHeaders().asSimpleMap(), true));

    }

}
