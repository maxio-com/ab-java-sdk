/*
 * MaxioAdvancedBillingFormerlyChargifyAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.chargify.subdomain.controllers;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;

import com.chargify.subdomain.ApiHelper;
import com.chargify.subdomain.MaxioAdvancedBillingFormerlyChargifyAPIClient;
import com.chargify.subdomain.exceptions.ApiException;
import com.chargify.subdomain.models.BasicDateFieldEnum;
import com.chargify.subdomain.models.CreateCustomerRequest;
import com.chargify.subdomain.models.CustomerResponse;
import com.chargify.subdomain.models.containers.ListCustomersDirection;
import io.apimatic.core.utilities.TestHelper;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.Test;

public class CustomersControllerTest extends BaseControllerTest {

    /**
     * Client instance.
     */
    private static MaxioAdvancedBillingFormerlyChargifyAPIClient client;
    
    /**
     * Controller instance (for all tests).
     */
    private static CustomersController controller;

    /**
     * Setup test class.
     */
    @BeforeClass
    public static void setUpClass() {
        client = createConfiguration();
        controller = client.getCustomersController();
    }

    /**
     * Tear down test class.
     */
    @AfterClass
    public static void tearDownClass() {
        controller = null;
    }

    /**
     * You may create a new Customer at any time, or you may create a Customer at the same time you
     * create a Subscription. The only validation restriction is that you may only create one
     * customer for a given reference value. If provided, the `reference` value must be unique. It
     * represents a unique identifier for the customer from your own app, i.e. the customer’s ID.
     * This allows you to retrieve a given customer via a piece of shared information.
     * Alternatively, you may choose to leave `reference` blank, and store Chargify’s unique ID for
     * the customer, which is in the `id` attribute. Full documentation on how to locate, create and
     * edit Customers in the Chargify UI can be located
     * [here](https://chargify.zendesk.com/hc/en-us/articles/4407659914267). ## Required Country
     * Format Chargify requires that you use the ISO Standard Country codes when formatting country
     * attribute of the customer. Countries should be formatted as 2 characters. For more
     * information, please see the following wikipedia article on
     * [ISO_3166-1.](http://en.wikipedia.org/wiki/ISO_3166-1#Current_codes) ## Required State Format
     * Chargify requires that you use the ISO Standard State codes when formatting state attribute
     * of the customer. + US States (2 characters):
     * [ISO_3166-2](https://en.wikipedia.org/wiki/ISO_3166-2:US) + States Outside the US (2-3
     * characters): To find the correct state codes outside of the US, please go to
     * [ISO_3166-1](http://en.wikipedia.org/wiki/ISO_3166-1#Current_codes) and click on the link in
     * the “ISO 3166-2 codes” column next to country you wish to populate. ## Locale Chargify allows
     * you to attribute a language/region to your customer to deliver invoices in any required
     * language. For more: [Customer
     * Locale](https://chargify.zendesk.com/hc/en-us/articles/4407870384283#customer-locale).
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testTestCreateCustomer() throws Exception {
        // Parameters for the API call
        CreateCustomerRequest body = ApiHelper.deserialize(
                "{\"customer\":{\"first_name\":\"Martha\",\"last_name\":\"Washington\",\"email\":"
                + "\"martha@example.com\",\"cc_emails\":\"george@example.com\",\"organization\":\"A"
                + "BC, Inc.\",\"reference\":\"1234567890\",\"address\":\"123 Main Street\",\"addres"
                + "s_2\":\"Unit 10\",\"city\":\"Anytown\",\"state\":\"MA\",\"zip\":\"02120\",\"coun"
                + "try\":\"US\",\"phone\":\"555-555-1212\",\"locale\":\"es-MX\"}}",
                CreateCustomerRequest.class);

        // Set callback and perform API call
        CustomerResponse result = null;
        try {
            result = controller.createCustomer(body);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test headers
        Map<String, String> headers = new LinkedHashMap<String, String>();
        headers.put("Content-Type", "application/json");
        
        assertTrue("Headers do not match", TestHelper.areHeadersProperSubsetOf(
                headers, httpResponse.getResponse().getHeaders().asSimpleMap(), true));

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys", 
                TestHelper.isJsonObjectProperSubsetOf(
                "{\"customer\":{\"first_name\":\"Cathryn\",\"last_name\":\"Parisian\",\"email\":\"S"
                + "tella.McLaughlin6@example.net\",\"cc_emails\":null,\"organization\":\"Greenholt "
                + "- Oberbrunner\",\"reference\":null,\"id\":76,\"created_at\":\"2021-03-29T07:47:0"
                + "0-04:00\",\"updated_at\":\"2021-03-29T07:47:00-04:00\",\"address\":\"739 Stephon"
                + " Bypass\",\"address_2\":\"Apt. 386\",\"city\":\"Sedrickchester\",\"state\":\"KY"
                + "\",\"state_name\":\"Kentucky\",\"zip\":\"46979-7719\",\"country\":\"US\",\"count"
                + "ry_name\":\"United States\",\"phone\":\"230-934-3685\",\"verified\":false,\"port"
                + "al_customer_created_at\":null,\"portal_invite_last_sent_at\":null,\"portal_invit"
                + "e_last_accepted_at\":null,\"tax_exempt\":false,\"vat_number\":null,\"parent_id"
                + "\":null,\"locale\":\"en-US\"}}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                false, true, false));
    }

    /**
     * This request will by default list all customers associated with your Site. ## Find Customer
     * Use the search feature with the `q` query parameter to retrieve an array of customers that
     * matches the search query. Common use cases are: + Search by an email + Search by a Chargify
     * ID + Search by an organization + Search by a reference value from your application + Search
     * by a first or last name To retrieve a single, exact match by reference, please use the
     * [lookup
     * endpoint](https://developers.chargify.com/docs/api-docs/b710d8fbef104-read-customer-by-reference).
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testTestListCustomers() throws Exception {
        // Parameters for the API call
        ListCustomersDirection direction = null;
        Integer page = 1;
        Integer perPage = 50;
        BasicDateFieldEnum dateField = BasicDateFieldEnum.fromString(
                "updated_at");
        String startDate = null;
        String endDate = null;
        String startDatetime = null;
        String endDatetime = null;
        String q = null;

        // Set callback and perform API call
        List<CustomerResponse> result = null;
        try {
            result = controller.listCustomers(direction, page, perPage, dateField, startDate, endDate, startDatetime, endDatetime, q);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test headers
        Map<String, String> headers = new LinkedHashMap<String, String>();
        headers.put("Content-Type", "application/json");
        
        assertTrue("Headers do not match", TestHelper.areHeadersProperSubsetOf(
                headers, httpResponse.getResponse().getHeaders().asSimpleMap(), true));

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys",
                TestHelper.isArrayOfJsonObjectsProperSubsetOf(
                "[{\"customer\":{\"first_name\":\"Kayla\",\"last_name\":\"Test\",\"email\":\"kayla@"
                + "example.com\",\"cc_emails\":\"john@example.com, sue@example.com\",\"organization"
                + "\":\"\",\"reference\":null,\"id\":14126091,\"created_at\":\"2016-10-04T15:22:27-"
                + "04:00\",\"updated_at\":\"2016-10-04T15:22:30-04:00\",\"address\":\"\",\"address_"
                + "2\":\"\",\"city\":\"\",\"state\":\"\",\"zip\":\"\",\"country\":\"\",\"phone\":"
                + "\"\",\"verified\":null,\"portal_customer_created_at\":\"2016-10-04T15:22:29-04:0"
                + "0\",\"portal_invite_last_sent_at\":\"2016-10-04T15:22:30-04:00\",\"portal_invite"
                + "_last_accepted_at\":null,\"tax_exempt\":false}},{\"customer\":{\"first_name\":"
                + "\"Nick \",\"last_name\":\"Test\",\"email\":\"nick@example.com\",\"cc_emails\":"
                + "\"john@example.com, sue@example.com\",\"organization\":\"\",\"reference\":null,"
                + "\"id\":14254093,\"created_at\":\"2016-10-13T16:52:51-04:00\",\"updated_at\":\"20"
                + "16-10-13T16:52:54-04:00\",\"address\":\"\",\"address_2\":\"\",\"city\":\"\",\"st"
                + "ate\":\"\",\"zip\":\"\",\"country\":\"\",\"phone\":\"\",\"verified\":null,\"port"
                + "al_customer_created_at\":\"2016-10-13T16:52:54-04:00\",\"portal_invite_last_sent"
                + "_at\":\"2016-10-13T16:52:54-04:00\",\"portal_invite_last_accepted_at\":null,\"ta"
                + "x_exempt\":false,\"parent_id\":123}},{\"customer\":{\"first_name\":\"Don\",\"las"
                + "t_name\":\"Test\",\"email\":\"don@example.com\",\"cc_emails\":\"john@example.com"
                + ", sue@example.com\",\"organization\":\"\",\"reference\":null,\"id\":14332342,\"c"
                + "reated_at\":\"2016-10-19T10:49:13-04:00\",\"updated_at\":\"2016-10-19T10:49:19-0"
                + "4:00\",\"address\":\"1737 15th St\",\"address_2\":\"\",\"city\":\"Boulder\",\"st"
                + "ate\":\"CO\",\"zip\":\"80302\",\"country\":\"US\",\"phone\":\"\",\"verified\":nu"
                + "ll,\"portal_customer_created_at\":\"2016-10-19T10:49:19-04:00\",\"portal_invite_"
                + "last_sent_at\":\"2016-10-19T10:49:19-04:00\",\"portal_invite_last_accepted_at\":"
                + "null,\"tax_exempt\":false,\"parent_id\":null}}]",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                false, true, false));
    }

}
